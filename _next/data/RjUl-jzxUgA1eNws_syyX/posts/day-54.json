{"pageProps":{"post":{"title":"Day 54 - Merge Sort","date":"2021-02-23","slug":"day-54","content":"<p>This is the fourth post in the Data Structures and Algorithms Series and this day I will be learning about Merge Sort. Merge Sort is one of the efficient sorting algorithms. It uses Divide and Conquer approach to sort a list of elements. It was invented by John Von Neuman in 1945.</p>\n<div style=\"display: flex; flex-direction: column; align-items: center;\">\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif\" alt=\"Merge Sort\">\r\n<small style=\"font-size: 10px\"></p>\n<p>Image Courtesy: <a href=\"https://en.wikipedia.org/wiki/Merge_sort#/media/File:Merge-sort-example-300px.gif\">Wikipedia</a>\r\n</small></p>\n</div>\n<p>But before we learn about merge sort we have to know what is merging.</p>\n<h2>What is Merging?</h2>\n<p>Merging is a method of combinig two sorted list to produce a single list which is also sorted.</p>\n<h3>How merging works?</h3>\n<p>First we provide merging function with two lists which are already sorted.</p>\n<pre><code class=\"language-py\">ls1 = [1, 3, 5, 7]\r\nls2 = [2, 4, 6, 8]\r\nmerge(ls1, ls2)\n</code></pre>\n<p>The merge function will take first element of both lists and compares them both to know which one is smaller and place that in the new list.</p>\n<pre><code class=\"language-py\">new_list = []\r\ni = 0\r\nj = 0\r\nwhile len(ls1) != 0 and len(ls2) != 0:\r\n    if ls1[i] &#x3C; ls2[j]:\r\n        new_list.append(ls1[i])\r\n        ls1.pop(0)\r\n    else:\r\n        new_list.append(ls2[j])\r\n        ls2.pop(0)\r\n\r\nprint(new_list) # [1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>\n<p>The Merge function will iterate over all the elements of both lists, checks which one is smaller and adds it to new sorted list while removing that element from its parent list. This way the result list is also sorted. And Now to Merge Sort.</p>\n<h2>How Merge Sort Algorithm Works?</h2>\n<p>Merge Sort follows the following steps to sort the unsorted list.</p>\n<ol>\n<li>Divide the list into equal sublists with each containing one element as a list with one element is always sorted.</li>\n<li>Repeatedly merge sublists to a new sorted sublist until all the list forms a single sorted list with all the elements of the input list.</li>\n</ol>\n<p>Consider we have an unsorted list.</p>\n<pre><code class=\"language-py\">nums = [7, 8, 1, 3, 9, 2, 4, 5, 6, 0]\n</code></pre>\n<p>First it will divide the given list to small sublists with all having a single element in them.</p>\n<pre><code class=\"language-py\">nums = [[7, 1, 3, 2], [4, 5, 6, 0]]\r\nnums = [[[7, 1], [3, 2]], [[4, 5], [6, 0]]]\r\nnums = [\r\n        [\r\n            [\r\n                [7], [1]\r\n            ],\r\n            [\r\n                [3], [2]\r\n            ]\r\n        ],\r\n        [\r\n            [\r\n                [4], [5]\r\n            ],\r\n            [\r\n                [6], [0]\r\n            ]\r\n        ]\r\n       ]\n</code></pre>\n<p>Then it will sort the sublists of one elements to form a sorted list of two elements. Again it will takes all those sorted sublists of two elements and sort them to form sorted lists of four elements and it will do this until the list is sorted.</p>\n<pre><code class=\"language-py\">1. [[[[7], [1]], [[3], [2]]], [[[4], [5]], [[6], [0]]]]\r\n2. [[[1, 7], [2, 3]], [[4, 5], [0, 6]]]\r\n3. [[1, 2, 3, 7], [0, 4, 5, 6]]\r\n3. [0, 1, 2, 3, 4, 5, 6, 7]\n</code></pre>\n<p>Implementation of upcoming algorithms are going to be long so I will do the implemenentation in C along with Data Structures everytime I got some time and at some time in the future I will publish them on my GitHub.</p>\n","tags":["Data-Structures","Algorithms"]}},"__N_SSG":true}