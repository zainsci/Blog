{"pageProps":{"post":{"title":"Day 138","date":"2021-05-18","slug":"day-138","content":"<p>We now know what Redux is, we looked at the core concepts of Redux and so it is time to know about Redux App Structure to know how all these pieces fit together. Just like we learned Svelte by making a Todo Application we will also be learning about working with Redux by doing a todo application with react and Redux.</p>\n<h3>Initail Setup</h3>\n<p>First of all we need to install Redux in our application. We can do this with <code>npm install redux</code> to install the redux core library but since we will be building the todo application with react it is best to install the react-redux.</p>\n<pre><code class=\"language-bash\">$ npx create-react-app redux-todo\r\n$ npm install react-redux\n</code></pre>\n<p>After installing all the required packages and now we will edit the App in the <code>src</code> dir to make it look like a todo application and then after that we will use the Redux in it.</p>\n<h3>Todo Application</h3>\n<p>I have already built a simple Todo application with CRA and for now it contains a single Todo and nothing else. It contains a form for adding more todos. The todo right now are being stored using the useState Hook.</p>\n<p>You can find the source code for the Todo Application in the current state on <a href=\"\">-> This &#x3C;-</a> link.</p>\n<h3>Using Redux</h3>\n<p>As we know that a redux application have a single store which stores all the state data of the application. It have reducers that are used to update the state and actions which tell the reducer what part of the state to update. Currently a todo's data in the state looks like this.</p>\n<pre><code class=\"language-js\">{\r\n  id: 0,\r\n  text: \"First Todo\",\r\n  done: false\r\n}\n</code></pre>\n<p>The store is a list of Todos. Now we will be implementing the redux in our todo app.</p>\n<h3>Defining A Reducer</h3>\n<p>First of all we will be creating a reducer function. A reducer function is a pure function. It will not mutate the value of the store that we will be provideing it but will return us with a new store that is updated with the value action provided.</p>\n<p>I will be creating a new file named <code>reducer.js</code> in the <code>src</code> directory and in the file we define a reducer function.</p>\n<pre><code class=\"language-js\">// reducer.js\r\nlet lastId = 0;\r\n\r\nconst reducer = (store = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return [\r\n        ...store,\r\n        {\r\n          id: lastId + 1,\r\n          text: action.payload.text,\r\n          done: false,\r\n        },\r\n      ];\r\n    case \"REMOVE_TODO\":\r\n      return store.filter(todo => todo.id !== action.payload.id);\r\n  }\r\n};\n</code></pre>\n<p>Here the reducer takes store as the first argument and the action as the second argument to update the store. In the next post we will be creating a store and add implement the store in the app and make the app fully functional.</p>\n"}},"__N_SSG":true}