{"pageProps":{"post":{"title":"Day 145 - React Forms With Formik","date":"2021-05-25","slug":"day-145","content":"<p>Building forms with React can be painful when you have to do all the things yourself like validation and handeling form submission etc But there is a way to deal with it by using a React library called Formik. Formik helps you create and manage forms in your React project.</p>\n<p>Formik helps you with three most important parts of a form in React.</p>\n<ul>\n<li>Getting values in and out of form state</li>\n<li>Validation and error messages</li>\n<li>Handling form submission</li>\n</ul>\n<p>Now we know what formik is and what it will do for us we will now see how to use it in our project.</p>\n<h2>Installing Formik</h2>\n<p>To install Formik use <code>npm</code> or <code>yarn</code> to add it to your project.</p>\n<pre><code class=\"language-bash\">$ npm install formik --save\r\n$ yarn add formik\n</code></pre>\n<h2>Formik In React</h2>\n<p>To create a form with <code>formik</code> in React we use <code>useFormik</code> hook by the <code>Formik</code> Library. <code>useFormik</code> internally uses <code>Formik</code> component which renders a React Contect Provider to manage state of the form and <code>useFormik</code> hook is also not meant for the majority of the use cases. So we will be only using <code>Formik</code> react component to build our forms in React.</p>\n<p>First of all import <code>Formik</code> from formik and use it in the return statement. <code>Formik</code> component uses render props pattern to build forms.</p>\n<pre><code class=\"language-jsx\">import { Formik } from \"formik\";\r\n\r\nconst Form = () => {\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;h1>Login&#x3C;/h1>\r\n      &#x3C;Formik>{}&#x3C;/Formik>\r\n    &#x3C;/div>\r\n  );\r\n};\n</code></pre>\n<p>Formik component requires two props when using the <code>Formik</code> component. One is <code>initialValues</code> and the other is <code>onSubmit</code></p>\n<ul>\n<li><code>initialValues</code> takes a JS object which includes all the initial values of the inputs we use in the form like <code>username</code> and <code>email</code> etc.</li>\n<li><code>onSubmit</code> takes a function to deal with the values of the form when we submit the form.</li>\n</ul>\n<p>Inside the <code>Formik</code> component it will require a function which will render a form and takes a JS object as an argument. The object arguemnt includes variables like <code>values</code>, <code>handleChange</code> etc to manage the values of the form inputs.</p>\n<pre><code class=\"language-jsx\">&#x3C;Formik\r\n  initialValues={{ username: \"\", password: \"\" }}\r\n  onSubmit={data => console.log(data)}\r\n>\r\n  {({ values, touched, handleChange, handleBlur, handleSubmit }) => {\r\n    return (\r\n      &#x3C;form onSubmit={handleSubmit}>\r\n        &#x3C;input\r\n          type=\"text\"\r\n          value={values.username}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        &#x3C;input\r\n          type=\"password\"\r\n          value={values.password}\r\n          onChange={handleChange}\r\n          onBlur={handleBlur}\r\n        />\r\n        &#x3C;button type=\"submit\">Login&#x3C;/button>\r\n      &#x3C;/form>\r\n    );\r\n  }}\r\n&#x3C;/Formik>\n</code></pre>\n<p>Okay now that we have built a simple form with Formik how can we validate a check for errors?</p>\n<h2>Form Validation</h2>\n<p>We can do form validation straight from Formik component. This will do the trick but it is recommended to use a another library called <code>yup</code> to handle form validation.\r\nFirst of all we have to inclue a prop in the Formik component which will check for errors in the form.</p>\n<pre><code class=\"language-jsx\">&#x3C;Formik\r\n  initialValues={{ username: \"\", password: \"\" }}\r\n  onSubmit={data => console.log(data)}\r\n  validate={data => {\r\n    const errors = {};\r\n    if (!data.username) {\r\n      errors.username = \"Username Required!\";\r\n    }\r\n\r\n    return errors;\r\n  }}\r\n>\n</code></pre>\n<p>After that we can also use <code>errors</code> and <code>isSumbiting</code> values that are passed inside the Formik component render prop.\r\nThen we can use these to do validation.</p>\n<pre><code class=\"language-jsx\">{\r\n  ({\r\n    values,\r\n    touched,\r\n    handleChange,\r\n    handleBlur,\r\n    handleSubmit,\r\n    errors,\r\n    touched,\r\n    isSubmitting,\r\n  }) => {\r\n    // Here comes the form\r\n    {\r\n      // This will print error if there is one\r\n      errors.username &#x26;&#x26; touched.username &#x26;&#x26; errors.username;\r\n    }\r\n  };\r\n}\n</code></pre>\n<h2>Simplifying</h2>\n<p>To simplyfy this more we can use the <code>Form</code>, <code>Field</code> and <code>ErrorMessage</code> components from the Formik library.</p>\n<pre><code class=\"language-jsx\">import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\n\r\nconst UserForm = () => {\r\n  return (\r\n    &#x3C;Formik\r\n      initialValues={{ username: \"\", password: \"\" }}\r\n      onSubmit={(data, { setSubmitting }) => {\r\n        console.log(JSON.stringify(data, null, 2));\r\n        setSubmitting(false);\r\n      }}\r\n      validate={data => {\r\n        const errors = {};\r\n        if (!data.username) {\r\n          errors.username = \"Username Required!\";\r\n        }\r\n\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isSubmitting }) => {\r\n        &#x3C;Form>\r\n          &#x3C;Field type=\"text\" name=\"username\" />\r\n          &#x3C;ErrorMessage name=\"username\" component=\"div\" />\r\n          &#x3C;Field type=\"password\" name=\"password\" />\r\n          &#x3C;button type=\"submit\" disabled={isSubmitting}>\r\n            Submit\r\n          &#x3C;/button>\r\n        &#x3C;/Form>;\r\n      }}\r\n    &#x3C;/Formik>\r\n  );\r\n};\n</code></pre>\n<p>The values of the form can be accessed by the name we give them in the Field component. Hope you learned something new. Next I will be starting to make my own Design System.</p>\n","tags":["React","JavaScript"]}},"__N_SSG":true}