{"pageProps":{"post":{"title":"Day 144 - TypeChecking With PropTypes","date":"2021-05-24","slug":"day-144","content":"<p>Last three post we learned about Styled-Components which is used to style application by writing CSS directly in JS and React. I liked it a lot and now thinking of again rewriting CSS of this blog completely with Styled-Components but later on that. Now we will be learning about PropTypes.</p>\n<p>In React we build application by breaking the UI in small resuable components and we also need to pass data from one component to the other more commonly from parent to a child. We pass this data through Component Properties or in React know as <code>props</code>.</p>\n<p>When passing data through props we have to make sure that the data we are passing and receiving must be the one we are expecting. Like if we are expecting a props to be of type <code>String</code> we must check if it is a prop of type <code>String</code>. To do this type checking we can use either TypeScript or if you are not working with TS then with a library called <code>props-types</code>.</p>\n<h2>PropTypes</h2>\n<p>PropTypes in a React App ensures that the right type of prop is passed to a child component and a child component is receiving the right type of props. As our application grows we can catch a lot of bugs before hand using type checking.</p>\n<p>Prior to version 15 of React, PropTypes were builtin in React. But now we have to install a library for PropTypes. To install, run the following command.</p>\n<pre><code class=\"language-bash\">$ npm i prop-types\n</code></pre>\n<h2>Usage</h2>\n<p>To use PropTypes we first have to import them and then first we must have a Component on which we want to define PropTypes.</p>\n<p>Consider this following example. We have a <code>Post</code> component with an <code>Author</code> component nested inside it. The <code>Author</code> component receives props from the <code>Post</code> component and we have to check that we have received the right type of props.</p>\n<pre><code class=\"language-jsx\">const Post = props => {\r\n  const { content, author } = props;\r\n\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;p>{content}&#x3C;/p>\r\n      &#x3C;br />\r\n      &#x3C;Author author={author} />\r\n    &#x3C;/div>\r\n  );\r\n};\n</code></pre>\n<p>In the <code>Author.js</code> file we can define the PropTypes as following.</p>\n<pre><code class=\"language-jsx\">// Author.js\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Author = props => {\r\n  return (\r\n    &#x3C;div>\r\n      &#x3C;h2>\r\n        {props.firstName} {props.lastName}\r\n      &#x3C;/h2>\r\n      {props.active ? \"Online\" : \"Offline\"}\r\n    &#x3C;/div>\r\n  );\r\n};\r\n\r\nAuthor.propTypes = {\r\n  firstName: PropTypes.string.isRequired,\r\n  lastName: PropTypes.string,\r\n  active: PropTypes.bool,\r\n};\r\n\r\nexport default Author;\n</code></pre>\n<p>Below the Author component we are defining the PropsTypes for it and this will ensure that the props that we receive from the <code>Post</code> component are of right types. In the <code>Author.propTypes</code> object we define the name of the props we will be receiving and the type of those props with the <code>PropTypes</code> library. Note there is a <code>isRequired</code> in front of the firstName and it will ensure that the Post component must provide the <code>firstName</code> prop to the <code>Author</code> component.</p>\n<p>All of the PropTypes of the props that we can pass to a component are list on the Official React Documentation Website. You can check them out <a href=\"https://reactjs.org/docs/typechecking-with-proptypes.html\">-> Here &#x3C;-</a>.</p>\n","tags":["React","JavaScript"]}},"__N_SSG":true}