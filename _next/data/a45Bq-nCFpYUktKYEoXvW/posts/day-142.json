{"pageProps":{"post":{"title":"Day 142 - Theming With Styled Components","date":"2021-05-22","slug":"day-142","content":"<p>In the last post we learned about the Basics of Styled Components and now we are gonna look at the Advance features of Styled Components mainly about how we can have a Theming support in React with Styled Components.</p>\n<h2>Theming</h2>\n<p>To use styled-components theming support we have to wrap our application with the <code>ThemeProvider</code> component which will let all the components under the <code>ThemeProvider</code> to have access to theme variables. Under the hood <code>ThemeProvider</code> uses react contect API so even if a component is deeply nested in the tree of components, it can have access to the theming variables.</p>\n<p>Now lets experiment with this by creating a reacreaing the Button component from the last post But this time the Button appearence will depend on the theme of the app.</p>\n<pre><code class=\"language-jsx\">const Button = styled.button`\r\n  padding: 0.5rem 1rem;\r\n  margin: 0.5rem;\r\n  font-weight: 600;\r\n  color: var(--white);\r\n  background-color: ${props => props.theme.main};\r\n  border: 1px solid ${props => props.theme.main};\r\n  border-radius: 0.5rem;\r\n`;\r\n\r\n// This sets the default theme\r\n// for Button components\r\nButton.defaultProps = {\r\n  theme: {\r\n    main: \"var(--blue)\",\r\n  },\r\n};\r\n\r\n// These are the custom theme\r\n// Variables that we create\r\nconst theme = {\r\n  main: \"var(--purple)\",\r\n};\r\n\r\nreturn (\r\n  &#x3C;>\r\n    &#x3C;Button>Normal Button&#x3C;/Button>\r\n    &#x3C;ThemeProvider theme={theme}>\r\n      &#x3C;Button>Theme Button&#x3C;/Button>\r\n    &#x3C;/ThemeProvider>\r\n  &#x3C;/>\r\n);\n</code></pre>\n<p>Note that we are assigning an object with a theme object inside to the <code>Button.defaultProps</code>. These styles will be rendered if there are no theme vaiables provided. First button will have this background color as it is outside the scope of <code>ThemeProvider</code>.</p>\n<p><img src=\"/blog/assets/images/day-142/button01.jpg\" alt=\"Styled Components Theme Buttons\"></p>\n<h2>Function Themes</h2>\n<p>We can also pass functions to the theme prop inside the <code>ThemeProvider</code> component and this function will have access to object that we pass as a prop to the parent <code>ThemeProvider</code> component. We can use this to customize the theme inside another theme as we want.</p>\n<pre><code class=\"language-jsx\">const Button = styled.button`\r\n  padding: 0.5rem 1rem;\r\n  margin: 0.5rem;\r\n  font-weight: 600;\r\n  color: ${props => props.theme.secondary};\r\n  background-color: ${props => props.theme.main};\r\n  border: 1px solid ${props => props.theme.secondary};\r\n  border-radius: 0.5rem;\r\n`;\r\n\r\nconst theme = {\r\n  main: \"var(--purple)\",\r\n  secondary: \"var(--white)\",\r\n};\r\n\r\nconst newTheme = ({ main, secondary }) => {\r\n  return {\r\n    main: secondary,\r\n    secondary: main,\r\n  };\r\n};\r\n\r\nreturn (\r\n  &#x3C;>\r\n    &#x3C;ThemeProvider theme={theme}>\r\n      &#x3C;Button>Normal Button&#x3C;/Button>\r\n      &#x3C;ThemeProvider theme={newTheme}>\r\n        &#x3C;Button>Theme Button&#x3C;/Button>\r\n      &#x3C;/ThemeProvider>\r\n    &#x3C;/ThemeProvider>\r\n  &#x3C;/>\r\n);\n</code></pre>\n<p><img src=\"/blog/assets/images/day-142/button02.jpg\" alt=\"Styled Components Theme Buttons\"></p>\n<h2>The Theme Prop</h2>\n<p>A theme can also be directly passed to a component using the theme prop. This can override the theme provided by the <code>ThemeProvider</code>.</p>\n<pre><code class=\"language-jsx\">const theme = {\r\n  main: \"var(--purple)\",\r\n  secondary: \"var(--white)\",\r\n};\r\n\r\nreturn (\r\n  &#x3C;>\r\n    &#x3C;ThemeProvider theme={theme}>\r\n      &#x3C;Button>Normal Button&#x3C;/Button>\r\n      &#x3C;Button theme={{ main: \"var(--white)\", secondary: \"var(--purple)\" }}>\r\n        Theme Button\r\n      &#x3C;/Button>\r\n    &#x3C;/ThemeProvider>\r\n  &#x3C;/>\r\n);\n</code></pre>\n<p>I think this is all we need to build a dark and light theme application using react and styled components.</p>\n","tags":["React","JavaScript","CSS"]}},"__N_SSG":true}