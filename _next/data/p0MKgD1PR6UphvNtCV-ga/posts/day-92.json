{"pageProps":{"post":{"title":"Day 92 - Deadlock Detection During Process Synchronization","date":"2021-04-02","slug":"day-92","content":"<p>We yesterday learned about some techniques to prevent deadlocks from occuring and there are ways to avoid deadlocks too but we will discuss about them some other day but for today we will be learning about some ways on how to detect deadlocks in the first place.</p>\n<p>Deadlock detection is the first step in avoiding deadlocks from happening. If a deadlock appears in the system it must be detected and recovered. The system must provide some ways of detecting deadlocks.</p>\n<h3>Single Instance of Each Resource Type</h3>\n<p>Suppose that each resource type has onyl one instance and there is only one printer and harddrive etc. A variant of the <strong>Resource-Allocation Graph</strong> called a <strong>wait-for graph</strong> can be used by removing the nodes of the type resource and collapsing the appropriate edges.</p>\n<p>In this graph, processes are not waiting for the resources. They are waiting for other porcesses that are holding these resources so a cycle in this graph can tell us that there is a deadlock in the processes. But this approach requires that the cycle detection algorithm must run from time to time in order to detect deadlocks in the system. Algorithms that detect cycles are of complxity <strong>O(n^2)</strong> where n is the number of vertices in the graph.</p>\n<h3>Detection-Algorithm Usage</h3>\n<p>In order to detect deadlocks we need some detection algorithm to run after every unit time has passed. This time unit is dependent on out assumption of how often deadlocks appear and how much processes they effect in the systems.</p>\n<p>If deadlocks appear often we may run it often. We can also run the detection algorithm on every resource request but since we know that deadlocks are rare it may not be a very efficient use of resources amd it will effect resources.</p>\n<p>We can run these algorithms from time to time at random or after some hour or minutes to detect deadlocks.</p>\n","tags":["Operating-Systems"]}},"__N_SSG":true}