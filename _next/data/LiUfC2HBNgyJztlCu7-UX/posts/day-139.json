{"pageProps":{"post":{"title":"Day 139 - Building A Todo App With React & Redux [1]","date":"2021-05-19","slug":"day-139","content":"<p>In the last post we started building a todo application with react and redux. We first created a simple todo app with CRA, styled it and added a biolerplate todo item in it using useState Hook. After that we defined a reducer function which currently on adds a todo and deletes a todo item from the store.</p>\n<p>In today's post we will fully implement the redux into the todo application and after that we will be able to add a todo and delete a todo from the application. We will start from where we left. We createda reducer frunction in the <code>src/redux</code> folder. This reducer function is a pure function and will only return a modified copy of the store we provided it with.</p>\n<p>Now will create two new files that are also related to the redux. First a <code>store.js</code> and second a <code>actions.js</code>.</p>\n<h2>Store</h2>\n<p>The store file just exports a store instance using the <code>createStore</code> function from the redux library and takes the reducer function we defined earlier as the argument.</p>\n<pre><code class=\"language-js\">import { createStore } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;\n</code></pre>\n<h2>Actions</h2>\n<p>The actions files contains two pure function that will return a js object with a <code>type</code> and a <code>payload</code> field. <code>addTodo</code> function takes text of the todo as the argument and returns an object with type and payload. Simillary <code>removeTodo</code> takes the id of the todo and the reducer function will remove the todo with id as same as this todo.</p>\n<pre><code class=\"language-js\">export function addTodo(text) {\r\n  return {\r\n    type: \"ADD_TODO\",\r\n    payload: {\r\n      text,\r\n    },\r\n  };\r\n}\r\n\r\nexport function removeTodo(id) {\r\n  return {\r\n    type: \"REMOVE_TODO\",\r\n    payload: {\r\n      id,\r\n    },\r\n  };\r\n}\n</code></pre>\n<p>This is all we need to use from the redux library to create and use the store in our application. All we need now is to implement the store in our todo application components.</p>\n<h2>Implmenting Store In TodoApp</h2>\n<p>First we need to wrap the <code>&#x3C;App></code> compoenent in the <code>index.js</code> file with a <code>Provider</code> component with <code>store</code> as a prop to it.</p>\n<pre><code class=\"language-jsx\">import store from \"./redux/store\";\r\n// ....\r\n&#x3C;Provider store={store}>\r\n  &#x3C;App />\r\n&#x3C;/Provider>;\r\n// ....\n</code></pre>\n<p>What this does is makes the store accessible to all the children of the <code>App</code> component. After this we will connect the store with the todoList.</p>\n<h2>Connecting Store With TodoList</h2>\n<p>In the <code>TodoList</code> Component, import <code>{ connect }</code> from <code>react-redux</code> and after that create a function named <code>mapTodosToProps</code> with store as the argument to it and it will return us the todos with the TodoList props.</p>\n<pre><code class=\"language-jsx\">import { connect } from \"react-redux\";\r\n// ...\r\nconst TodoList = props => {\r\n  const { todos } = props;\r\n  // ...\r\n  // ..\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { todos: state };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TodoList);\n</code></pre>\n<p>At the end of the file we use the connect function as a pipe to transfer todos we take from the <code>mapStateToProps</code> function to the props of the <code>TodoList</code> component that we will later render in the UI.</p>\n<h2>Adding And Removing Todo Item</h2>\n<p>We defined two actions in the <code>actions.js</code> file and using those functions we will add and remove the todo item from the list.</p>\n<p>In the <code>AddTodo.js</code> component, we import store from the <code>store.js</code> and import <code>addTodo</code> action from <code>actions</code>. Later in the code we use these two from the add Todo item to store. Store has a method called <code>despatch</code> which we call with action as an argument to update the store as required. In this application we use a form to send out data. In the form elemnt we use the <code>onSumbit</code> event to send the value of the input to the <code>submitData</code> function which will update the store.</p>\n<pre><code class=\"language-jsx\">&#x3C;form className=\"form\" onSumbit={submitForm}>\n</code></pre>\n<pre><code class=\"language-jsx\">const submitForm = e => {\r\n  e.preventDefault();\r\n\r\n  store.dispatch(actions.addTodo(val));\r\n  setValue(\"\");\r\n};\n</code></pre>\n<p>For removing item we use a simmilar trick. On the svg icon we add a <code>onClick</code> event with an arrow function that calls the <code>removeTodo</code> action. which will filter the store and returns us the updated store.</p>\n<pre><code class=\"language-jsx\">&#x3C;div\r\n    className=\"todo__cross\"\r\n    onClick={() => store.dispatch(removeTodo(todo.id))}\r\n>\n</code></pre>\n<p>You can find the completed version of this todo App in the github repo <a href=\"https://github.com/zainsci/redux-todo\">-> Here &#x3C;-</a>.</p>\n","tags":["Redux","JavaScript","React"]}},"__N_SSG":true}