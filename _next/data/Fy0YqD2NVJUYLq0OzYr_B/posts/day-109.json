{"pageProps":{"post":{"title":"Day 109 - Custom Events In SvelteJS","date":"2021-04-19","slug":"day-109","content":"<p>Last day we built a TodoList with SvelteJS. We can add an item and cross from the list but in its current situation we cannot delete and item from the list. Today we will be making a little change to it. This change will be that we can delete the item from the list.</p>\n<p>The Source Code for this can be found of <a href=\"https://www.github.com/zainsci/svelte-todo\">Github.</a></p>\n<h3>Some Changes From The Last Day</h3>\n<p>First of all this is what both files, <code>TodoList.svelte</code> and <code>Todo.svelte</code> looks like now. I made little changes from the last one that I shared on the last post, like chagned variables and functions etc.</p>\n<script src=\"https://gist.github.com/zainsci/1b55aff3b8894cf376bca1ae238a73e7.js\"></script>\n<script src=\"https://gist.github.com/zainsci/c42e75464adc787aa5e9515e8d5c7539.js\"></script>\n<h3>Todo.svelte</h3>\n<p>I add a new svg icon <code>x</code> with an event that is triggered when we click on it, it removes the item from the list. This event is a custom event that we can create in SvelteJS to communicate with parent elemts from the child elements.</p>\n<h4>Custom Events</h4>\n<p>In <code>Todo.svelte</code> we imported a function called <code>createEventDispatcher</code> from the svelte library and then assigned a variable called <code>dispatch</code> by calling <code>createEventDispatcher</code> in it. This is then used in the <code>removeTodo</code> funciton to tell the parent child to remove the item with the <code>id</code>.</p>\n<p>This way we can listen to these events in parent component and act accordingly.</p>\n<h3>TodoList.svelte</h3>\n<p>In the <code>TodoList.svelte</code> we changed the <code>addItem</code> function to <code>addTodo</code> which pushes an object to the <code>todos</code> array. In new todo we add <code>Date.now()</code> as an id for it to be unique. Then there is a <code>removeTodo</code> function that just filters the todos and returns a new array and removes the one that we want.</p>\n<p>In the HTML, there is a custom event we are listening to in the <code>&#x3C;Todo/></code> component which is <code>on:remove</code> that we defined in the <code>&#x3C;Todo/></code> which will call the removeTodo function.</p>\n<p>I think this is all the basics that we need to start working with SvelteJS and obviously these are not the only things that are in the Svelte that we should be learning about. There are many more things to learn about in this framework like Bindings, Store, Animation and Special Elemnts etc. But for now this is okay or maybe. Anyway to learn more about SvelteJS, Check out the <a href=\"https://svelte.dev/tutorial/basics\">Tutorial &#x26; Documentation</a>. Its your best friend.</p>\n<p>Honestly I think it should have been only one post that sumarized all the basics of the SvelteJS but I made it into three post to take some time away from heavy stuff like Operating Systems.</p>\n","tags":["JavaScript","FrontEnd","SvelteJS"]}},"__N_SSG":true}