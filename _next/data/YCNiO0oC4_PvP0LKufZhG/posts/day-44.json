{"pageProps":{"post":{"title":"Day 44 - Explaning RegEx Syntax","date":"2021-02-13","slug":"day-44","content":"<p>In the last post about the Regular Expression I tried to explain what are regex with examples but doing that would make these post unnecssary large and might be hard to read so I will try to simply just explain all the keywords and sysntax of the regex with examples and all of it in this single post.</p>\n<p>First of all about the basic concepts in the regex</p>\n<h3>Pipe <code>|</code></h3>\n<p>The pipe character <code>|</code> works as <code>OR</code> between two patterns. Example: <code>color|colour</code> will search for either color or colour word.</p>\n<h3>Dot <code>.</code></h3>\n<p>The dot <code>.</code> means match any character. Example: <code>a.b</code> will look for a followed by any character and then b, like <code>azb</code> or <code>a0b</code> etc.</p>\n<h3>Grouping</h3>\n<p>To group an expression parantheses <code>( )</code> are used. Example: The same expression <code>color|colour</code> can also be written as <code>col(o|ou)r</code> to look for color or colour.</p>\n<h3>Asterisk <code>*</code></h3>\n<p>The asterisk <code>*</code> will look for zero or more occurences of the preceding character. Example: <code>co*l</code> will match words that have zero or more like <code>cl</code>, <code>cool</code>, <code>coool</code> or <code>coooooool</code> etc.</p>\n<h3>Plus Symbol <code>+</code></h3>\n<p>The same as <code>*</code> but for one or more occurences of the preceding character. Example: <code>co+l</code> will match <code>col</code>, <code>cool</code>, <code>cooooooool</code> etc</p>\n<h3>Question Mark <code>?</code></h3>\n<p>The Question Mark <code>?</code> will look for zero or only one occurence of the preceding character. Example: <code>co?l</code> will match <code>col</code> and <code>cl</code> only.</p>\n<h3>Curly Brackets<code>{ }</code></h3>\n<p>Curly Brackets are used for matching an expression with given number of times. It syntax looks like this <code>{min, max}</code> where min is the minimum number and max is the maximum number of matches to look for.</p>\n<ul>\n<li><code>{n}</code> will match preceding element n times</li>\n<li><code>{n, }</code> will match preceding element n or more times</li>\n<li><code>{ ,n}</code> will match preceding up to n times</li>\n<li><code>{min, max}</code> will match preceding element between min and max times</li>\n</ul>\n<h3>Caret Symbol <code>^</code></h3>\n<p>This character <code>^</code> mathces the starting position of a line.</p>\n<h3>Dollar Sign <code>$</code></h3>\n<p>The Dollar Sign matches the end of the line.</p>\n<h3>Square Brackets <code>[ ]</code></h3>\n<p>The Square brackets <code>[ ]</code> matches a single character that is inside the brackets. and if <code>^</code> Carte is added in the brackets like <code>[^ ]</code> it will match any character except the character inside the bracekts.</p>\n<p>I think these are enough to write any pattern that you want with regex.</p>\n","tags":["Linux"]}},"__N_SSG":true}