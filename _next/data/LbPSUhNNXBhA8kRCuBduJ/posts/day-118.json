{"pageProps":{"post":{"title":"Day 118 - Ownership & Borrowing In Rust","date":"2021-04-28","slug":"day-118","content":"<p>We now know how to assign variables, how to write comments and work with functions in Rust and now comes a concept that is unique to Rust Programming Language and that is Ownership. Ownership in Rust guarantees memory safety without the use of any Garbage Collector. We will look into what owendership is, what is borrowing and how Rust works with the memory.</p>\n<h3>Ownership</h3>\n<p>In other programming languages like C or C++ we have allocate memory ourselves to do some tasks and also you had to free the memroy yourself too. This not freeing memory can cause memory leaks and performance issues in the program. But Rust is different from these languages. Rust manages the memory with the help of the concept called Ownership while not slowing down the program.</p>\n<p>Ownership is simple words is that every variable to which a value is assigned is the owner of that value and there can only be one owner at a time and when ever the owner goes out of scope, the value is droppped. To explain it in detail consider the following.</p>\n<pre><code class=\"language-rs\">fn main() {\r\n    let name = String::from(\"Rust\");\r\n\r\n    print_name(name);\r\n\r\n    println!(\"First: {}\", name);\r\n}\r\n\r\nfn print_name(name: String) {\r\n    println!(\"Second: {}\", name);\r\n}\n</code></pre>\n<p>We are using the type <code>String</code> here becuase the types we discussed earlier in the last post are allocate in the stack and are poped out when they are out of the scope but for this example we need a type that allocates the memory inside the heap. Heap is the place where the program dynamically allocates the memory.</p>\n<p>If we compiled the code now using <code>cargo run</code> (we will learn about cargo in the next section) we will get the following error.</p>\n<pre><code class=\"language-bash\">Linux$ cargo run\r\n   Compiling rust v0.1.0 (C:\\Rust\\rust)\r\nerror[E0382]: borrow of moved value: `name`\r\n --> src\\main.rs:6:24\r\n  |\r\n2 |     let name = String::from(\"Rust\");\r\n  |         ---- move occurs because `name` has type `String`, which does not implement the `Copy` trait\r\n3 |\r\n4 |     print_name(name);\r\n  |                ---- value moved here\r\n5 |\r\n6 |     println!(\"No. {}\", name);\r\n  |                        ^^^^ value borrowed here after move\n</code></pre>\n<p>When we provided the <code>name</code> var with type <code>String</code> to <code>print_name</code> function it transferred the ownership of the var <code>name</code> to the function <code>print_name</code> and the var got out of the scope and since there is only one owner to each value the compiler throws an error saying that the <code>println!(name)</code> cannot access the var <code>name</code>.</p>\n<h3>Borrowing A Value</h3>\n<p>To deal with the ownership problem (which is not a problem but a feature), we can use another concept called Borrowing. It does what it says. This means that we borrow a value from a variable and when the value is used it is returned back to the owner.</p>\n<p>Now to change the code above we get the following.</p>\n<pre><code class=\"language-rs\">fn main() {\r\n    let name = String::from(\"Rust\");\r\n\r\n    print_name(&#x26;name);\r\n\r\n    println!(\"First: {}\", name);\r\n}\r\n\r\nfn print_name(name: &#x26;String) {\r\n    println!(\"Second: {}\", name);\r\n}\n</code></pre>\n<p>The only thing that is changed now is that there is an ampersand in <code>print_name(&#x26;name)</code> function call and in <code>print_name(name: &#x26;String)</code> function creation. What this will do is borrow the value from the <code>name</code> and when the function <code>print_name</code> returns, it will also return the value to the owner <code>name</code> and now if we compile the code it will look like this.</p>\n<pre><code class=\"language-bash\">Linux$ cargo run\r\n   Compiling rust v0.1.0 (C:\\Rust\\rust)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.68s\r\n     Running `target\\debug\\rust.exe`\r\nSecond: Rust\r\nFirst: Rust\n</code></pre>\n<p>I hope i made the concepts of Ownership and Borrowing a little easier to understand but still I highly recommend <a href=\"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html\">this page</a> on the official Rust website for you to read to better understand Ownership and Borrowing.</p>\n","tags":["Rust","Programming-Language"]}},"__N_SSG":true}