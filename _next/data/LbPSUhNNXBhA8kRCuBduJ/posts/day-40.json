{"pageProps":{"post":{"title":"Day 40 - Networking in Linux","date":"2021-02-09","slug":"day-40","content":"<p>Last eight posts were all about the basics of Linux, working with the command-line, handling User, Groups and Files and Permissions and all other things that you need to know to work with Linux. This post will be about Basic Networking Commands in Linux. I already have wrote a series on Nerworking Basics from Day24 to Day31 which you can be found on <a href=\"/tag/networking\">This Page</a>. Now to the networking commands in Linux.</p>\n<h2>Analyzing the Network</h2>\n<p>To analyze the current active network interfaces on your local network <code>ifconfig</code> command is used. <code>ifconfig</code> command displays the status of the current active network interfaces. Running this command on the terminal will print out the following results.</p>\n<pre><code class=\"language-bash\">root@User:~$ ifconfig\r\n\n</code></pre>\n<p>ifconfig is just showing two interfaces here, one eth0 and the other lo. eth0 means Ethernet0 and it is the first network connection to the Linux and the second is the lo which is called the loopback address or localhost.</p>\n<p>Ethernet0 (0 becasue Linux counts fron 0) is the physical connection to the network via a switch or a home router. lo is a special address that is used for local development and testing on the device. It is represented by either simply localhost as the domain or the IP address 127.0.0.1.</p>\n<p>ifconfig can show other interfaces too if they are connected to the device. For example if there is a Wireless adapter connected to your deivce for connection to the WiFi it will show an interface named wlan0 and details about it. ifconfig can do much more stuff than just showing network interfaces like changing your IP address.</p>\n<h3>Changing IP address</h3>\n<p>To change the IP address of your network interface type ipconfig with network interface name and the IP address you want.</p>\n<pre><code class=\"language-bash\">root@User:~$ ifconfig\r\neth0: inet 192.168.81.100 ...\r\n      ...\r\nroot@User:~$ ifconfig eth0 192.168.80.200\r\nroot@User:~$ ifconfig\r\neth0: inet 192.168.80.200 ...\r\n      ...\n</code></pre>\n<h2>Ping a Network</h2>\n<p>This command <code>ping</code> is a simple command that send packets to domain or IP address provided as the argument to check if it recceives response from the target address to see wether the target is online or not.</p>\n<pre><code class=\"language-bash\">root@User:~$ ping google.com\r\n\r\nPinging google.com [172.217.19.174] with 32 bytes of data:\r\nReply from 172.217.19.174: bytes=32 time=193ms TTL=118\r\nReply from 172.217.19.174: bytes=32 time=77ms TTL=118\r\nReply from 172.217.19.174: bytes=32 time=77ms TTL=118\r\nReply from 172.217.19.174: bytes=32 time=77ms TTL=118\r\n\r\nPing statistics for 172.217.19.174:\r\n    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),\r\nApproximate round trip times in milli-seconds:\r\n    Minimum = 77ms, Maximum = 193ms, Average = 106ms\r\n\n</code></pre>\n<h2>CURL</h2>\n<p>CURL command allows a user to send requests and data to a web server. Generally it is used for testing purposes. For example if typed in the command line with <code>google.com</code> it will output the following respone sent by the <code>google.com</code> server.</p>\n<pre><code class=\"language-bash\">root@User:~$ curl google.com\r\n\r\n&#x3C;HTML>&#x3C;HEAD>&#x3C;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\r\n&#x3C;TITLE>301 Moved&#x3C;/TITLE>&#x3C;/HEAD>&#x3C;BODY>\r\n&#x3C;H1>301 Moved&#x3C;/H1>\r\nThe document has moved\r\n&#x3C;A HREF=\"http://www.google.com/\">here&#x3C;/A>.\r\n&#x3C;/BODY>&#x3C;/HTML>\n</code></pre>\n<p>Google sent the response document HTML for the request to <code>google.com</code> which is a referrel to the https version of the the domain <code>https://www.google.com/</code>. and if we sent the curl request to the full domain it will send full HTML page that you see in the browser as the response for the request.</p>\n<p>But these are just simply the GET request how can we send POST request with it and send data.</p>\n<h3>POST request with CURL</h3>\n<p>To send a POST request with the curl, we use <code>-X</code> switch with <code>POST</code> as the value for it.</p>\n<pre><code class=\"language-bash\">root@User:~$ curl -X https://www.google.com\r\n\r\n&#x3C;!DOCTYPE html>\r\n&#x3C;html lang=en>\r\n    &#x3C;meta charset=utf-8>\r\n    ...\r\n    ...\r\n    &#x3C;title>Error 405 (Mrthod Not ALlowed)!!1&#x3C;/title>\r\n    ...\r\n&#x3C;/html>\n</code></pre>\n<p>Sending the POST request to Google will result in error as the Search Page will not accept any. That was just done to explain how to send the POST request.</p>\n<h3>Sending the data with CURL</h3>\n<p>To send the data like doing it on the web when logging into an account and entering the username and other stuff but here with curl and POST request, we use <code>-d</code> switch.Here <strong>d</strong> is for data and after the switch we add data into key=value format.</p>\n<pre><code class=\"language-bash\">root@User:~$ curl -X POST -d username=something key=value https://www.google.com\r\n\r\n&#x3C;!DOCTYPE html>\r\n&#x3C;html lang=en>\r\n    &#x3C;meta charset=utf-8>\r\n    ...\r\n    ...\r\n    &#x3C;title>Error 405 (Mrthod Not ALlowed)!!1&#x3C;/title>\r\n    ...\r\n&#x3C;/html>\n</code></pre>\n<p>Again we will see the same response and also you shouldn't send any data to any website as long as you understand what you are doing and to whon you are sending this data to.</p>\n","tags":["Linux","Networking"]}},"__N_SSG":true}