{"pageProps":{"post":{"title":"Day 108 - Conditionals And Events In Svelte","date":"2021-04-18","slug":"day-108","content":"<p>Yesterday we saw what SvelteJS is and why it is different from other JS frameworks like React and Vue etc. We also build a little counter with it and now we will be building a little Todo List with it and tomorrow again will make the list more better and functional than it is today.</p>\n<p>Again started with install SvelteJS by using the following command.</p>\n<pre><code class=\"language-bash\">User:~/svelte$ npx degit sveltejs/template svelte-demo\r\nUser:~/svelte$ npm install\r\nUser:~/svelte$ npm run dev\n</code></pre>\n<h3>ToDo List</h3>\n<p>We will be building a Todo List with SvelteJS. We can create an item and when we click on it it will cross the item. It is a simple application just like the last one but in this we will be learning about some more things about SvelteJS like using conditionals and Loops in the compoents.</p>\n<p>I removed all the boiler plate and create two new files, <code>list.svelte</code> and <code>item.svelte</code> in the src directory. Here's what <code>item.svelte</code> looks like.</p>\n<pre><code class=\"language-jsx\">&#x3C;script>\r\n  export let name;\r\n  let strike = false;\r\n\r\n  function strikeItem() {\r\n    strike = !strike;\r\n  }\r\n&#x3C;/script>\r\n\r\n&#x3C;div class=\"item\" on:click={strikeItem}>\r\n  &#x3C;div class={strike ? \"item-name strike\" : \"item-name\"}>\r\n    {name}\r\n  &#x3C;/div>\r\n&#x3C;/div>\n</code></pre>\n<p>In it we are first exporting a var <code>name</code> which is provided by the parent component <code>list.svelte</code> as a prop. boolean strike for checking if the item was clicked on and function <code>strikeItem</code> to change the boolean value if the item was clicked.</p>\n<h3>Events &#x26; Event Modifiers in Svelte</h3>\n<p>In the <code>.item</code> tag we see an attribute <code>on:click</code>. The keyword <code>on</code> followd by a colon <code>:</code> is how we listen for events in Svelte. <code>on:click</code> means to listen for event that is clicking the item in this case and in braces call the funciton to handle the event which changes the vaule of the boolean.</p>\n<p>Every event that you can use in JS or HTML can be used is Svelte with <code>on:</code> followed by the event name like <code>on:mousemove</code>, <code>on:submit</code>, <code>on:focus</code>, <code>on:dblclick</code> and <code>on:drag</code> etc.</p>\n<p>We can also use Event Modifiers in SvelteJS by using a pipe sign after the event name and adding the name of the modifier like this.</p>\n<pre><code class=\"language-jsx\">&#x3C;button on:click|preventDefault={function} type=\"submit\">\r\n    Click\r\n&#x3C;/button>\n</code></pre>\n<p>In this example, clicking the button will prevent the default from happening which in this case will reload the page but will be prevented by the event modifier. If we have to do this in vanila JS it would look like this.</p>\n<pre><code class=\"language-js\">function onClick(event) {\r\n  event.preventDefault();\r\n}\n</code></pre>\n<h3>Conditionals In Svelte</h3>\n<p>This <code>strike ? \"item-name strike\" : \"item-name\"</code> is just a ternary operator in JS which check if the condition is true return this or else this. <code>condition ? if true : if false</code>. Conditionals in Svelte work like following.</p>\n<pre><code class=\"language-jsx\">{#if condition}\r\n    &#x3C;!-- Do Someting -->\r\n{/if}\r\n\r\n&#x3C;!-- Or using else statements -->\r\n{#if condition}\r\n    &#x3C;!-- Do Someting -->\r\n{:else}\r\n    &#x3C;!-- Do Someting -->\r\n{/if}\r\n\r\n&#x3C;!-- Nesting IFs -->\r\n{#if condition}\r\n    &#x3C;!-- Do Someting -->\r\n{:else if anotherCondition}\r\n    &#x3C;!-- Do Someting -->\r\n{/if}\n</code></pre>\n<h3>Looping In Svelte</h3>\n<p>Next is the <code>list.svelte</code> file and it looks like this.</p>\n<pre><code class=\"language-jsx\">&#x3C;script>\r\n  import Item from \"./item.svelte\";\r\n\r\n  let items = [];\r\n  let value;\r\n\r\n  function addItem() {\r\n    items[items.length] = value;\r\n    value = \"\";\r\n  }\r\n&#x3C;/script>\r\n\r\n&#x3C;div class=\"wrapper\">\r\n  &#x3C;div class=\"items\">\r\n    {#each items as item}\r\n      &#x3C;Item name={item} />\r\n    {/each}\r\n  &#x3C;/div>\r\n  &#x3C;form on:submit|preventDefault={addItem}>\r\n    &#x3C;input type=\"text\" bind:value />\r\n    &#x3C;button>Add Item&#x3C;/button>\r\n  &#x3C;/form>\r\n&#x3C;/div>\n</code></pre>\n<p>Here we are importing first the item component and them using it inside a for loop which in Svelte looks like this.</p>\n<pre><code class=\"language-jsx\">{#each items as item}\r\n    &#x3C;!-- Do Something With item -->\r\n{/each}\n</code></pre>\n<p>We are passing the item <code>name</code> as a prop to the item component while looping over each item in the <code>items</code> array. Then we pass the addItem function to the form which calls the function on <code>on:submit|preventDefault</code> event which appends the item to <code>items</code> array and prevents the page from reloading. Adding some styling and it works like this.</p>\n<p><img src=\"/assets/images/day-108/todo-list.gif\" alt=\"Todo List\"></p>\n","tags":["JavaScript","FrontEnd","SvelteJS"]}},"__N_SSG":true}