{"pageProps":{"post":{"title":"Day 124 - Vectors In Rust","date":"2021-05-04","slug":"day-124","content":"<p>Next in Rust Programming Language we will be taking a look at Vectors which is a data structure in Rust. Vectors are like Lists in Python and arrays in C and JavaScript with some key differences.</p>\n<h3>Vectors</h3>\n<p>Vectors in Rust are like fixed size arrays but with much more functionality than just the fixed size arrays. In vectors we can add item, delete item, and also can move an item.</p>\n<p>To initialize a vector we use the <code>vec!</code> macro. For example:</p>\n<pre><code class=\"language-rs\">fn main() {\r\n    let nums = vec![1, 2, 3];\r\n}\n</code></pre>\n<p>To access the values of the vector there are two ways, using slicing or by using the <code>get</code> method.</p>\n<pre><code class=\"language-rs\">fn main() {\r\n    let nums = vec![1, 2, 3];\r\n\r\n    // Adding index number inside []\r\n    &#x26;nums[0]; // 1\r\n\r\n    // Or using a get method\r\n    nums.get(0); // 1\r\n    nums.get(2); // 3\r\n}\n</code></pre>\n<p>To add or remove items in a vector we use <code>push</code> and <code>remove</code> methods. But for addin or removing items to the vec it must have to be of muteable type.</p>\n<pre><code class=\"language-rs\">fn main() {\r\n    let mut nums = vec![1, 2, 3];\r\n\r\n    nums.push(4);\r\n    nums.push(5);\r\n    nums.push(6);\r\n\r\n    nums.remove(4); // index 4 not number 4\r\n\r\n    println!(\"{}\", &#x26;nums[4]); // 6\r\n}\n</code></pre>\n<p>Iterating over the members of a vector is same as in Python. Use a for loop.</p>\n<pre><code class=\"language-rs\">for num in &#x26;nums {\r\n    println!(\"{}\", num); // 1 2 3 4 6\r\n}\n</code></pre>\n<p>Now vectors can only store values of the same data type. At the initialization when we defined the <code>nums</code> vector we also placed values of type integer that tells the compiler that this vec will be of type integer. So now we can only values of type <code>i32</code> in it. But there is a way to store values of other types in the vector and that is with the help of Enums which we learned in <a href=\"/day-121/\">Day 121</a>.</p>\n<p>First we define an enum of name V with value of it being <code>Int(i32)</code> and <code>Float(f32)</code>. Then we can use this enum to store values of both int and float type in the vector.</p>\n<pre><code class=\"language-rs\">\r\nfn main() {\r\n    enum V {\r\n        Int(i32),\r\n        Float(f32),\r\n    };\r\n\r\n    let mut nums = vec![V::Int(1), V::Float(1.1)];\r\n}\n</code></pre>\n<p>But this thing is hard to deal with instead of a vector of a single type.</p>\n","tags":["Rust","Programming-Language"]}},"__N_SSG":true}