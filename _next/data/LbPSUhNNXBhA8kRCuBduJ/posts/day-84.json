{"pageProps":{"post":{"title":"Day 84 -  Peterson's Solution To Critical Section Problem","date":"2021-03-25","slug":"day-84","content":"<p>Last time we looked at the hardware-based solutions to the Critical Section Problem and now we will be learning about one of the most popular software-based solutions to the CSP. It is called Peterson's Solution.</p>\n<h3>Peterson's Solution</h3>\n<p>Peterson's Solution is an algorithmic solution to the critical section problem. it illustrates some of the complexities of software design that addresses the requirements of mutual exclusion, progress and bounded waiting. But because of how modern computer architectures perform instructions it does not guarantees that it will work properly.</p>\n<pre><code class=\"language-py\">while True:\r\n  flag[i] = True\r\n  turn = j\r\n  while flag[j] and turn == j:\r\n      # critical section\r\n      flag[i] = False\r\n  # remainder section\n</code></pre>\n<p>Peterson's Solution works only between two process that are alternating their execution between critical section and remainder section. These processes are numbered <em>P0</em> and <em>P1</em>. It requires two processes to share data items.</p>\n<pre><code class=\"language-py\">turn = i\n</code></pre>\n<p>The variable <code>turn</code> denotes which turn it is to enter its critical section and variable <code>flag[i]</code> is used to indicate the the porcess 1 is ready to enter it critical seciton. Now we will se how the algorithm works.</p>\n<p>First it will set the <code>flag[i]</code> to True to indicate that it is ready to enter its critical section while also assigning <code>j</code> to variable <code>turn</code> to indicate that other processes can also enter their critical section and currently it is <code>j</code>'s turn to enter the section. Then it checks that if it is still <code>j</code>'s turn and it's flag is set to true other wise it will set it to false. After that the process whose flag is set to true will enter critical section.\r\nThis way:</p>\n<ul>\n<li>Mutual exclusion is preserved.</li>\n<li>The progress requirment is satisfied.</li>\n<li>The bounded-waiting requirement is met.</li>\n</ul>\n<h3>Disadvantages Of Peterson's Solution</h3>\n<ul>\n<li>Only works for two processes at a time</li>\n<li>CPU time is wasted</li>\n</ul>\n","tags":["Operating-Systems"]}},"__N_SSG":true}