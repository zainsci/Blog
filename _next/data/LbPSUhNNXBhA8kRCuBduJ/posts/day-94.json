{"pageProps":{"post":{"title":"Day 94 - The Banker's Algorithm","date":"2021-04-04","slug":"day-94","content":"<p>The banker's algorithm is used to avoid deadlocks in a system and calculate resource allocation. As the name implies, the algorithm makes sure to not allocate resources in such a way that it will cause any process to starve.</p>\n<h2>The Banker's Algorithm</h2>\n<p>The algorithm simulates the allocation of predetermined maximum possible amounts of all resources and then makes an \"s-state\" check to test if there are any possible deadlock conditions for all other pending activites, before deciding to allocate the resources.</p>\n<p>When a new thread enters the system it must tells the system about all the resources it needs and how much of them during the execution and the number must not excede the number of resources available to the system. After the request, the system must check that if the allocation of the resources will leave the system in safe state and if it does not the thread should wait until some other thread releases the resources for it to be enough to leave the system in safe state.</p>\n<p>Following data structures are maintained to implement the banker's algorithm. These data structures encode the state of the resource allocation system. In these data structres <em>n</em> is the number of threads and <em>m</em> is the number of resources types.</p>\n<h3>Available</h3>\n<p>A vector of length <strong>m</strong> indicates number of available resources of each type.</p>\n<h3>Max</h3>\n<p>An <strong>n x m</strong> matrix indicates the maximum requirement of each process.</p>\n<h3>Allocated</h3>\n<p>The <strong>n x m</strong> matrix indicates number of resources of each type that are allocated to each process.</p>\n<h3>Need</h3>\n<p>The <strong>n x m</strong> matrix indicates the remaining number of resources need of each process.</p>\n","tags":["Operating-Systems"]}},"__N_SSG":true}