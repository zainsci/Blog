{"pageProps":{"post":{"title":"Day 58 - Binary Search Algorithm","date":"2021-02-27","slug":"day-58","content":"<p>Today was a bit busy day but I did learn an algorithm. This algorithm is called Binary Search which is a searching algorithm that recursively searches for a given element in a list.</p>\n<h2>Binary Search</h2>\n<p>Binary Search or also called Lograthimic search is a searching algorithm that find the given element in a sorted array. This list much be sorted for Binary search to work correctly. Binary Search is recursive alogorithm. But how it works?</p>\n<h3>How Binary Search Works?</h3>\n<p>Binary search takes two inputs, a sorted list and the element to look for in the list. Let this number be <code>X</code>. The algorithm will first compare the middle element from the list with <code>X</code>. If you are lucky and the middle element is the one you are looking for, the loop will end and the function will return <code>X</code> but that is not always the case and so the algorithm will check if the number is bigger or smaller than <code>X</code>.</p>\n<pre><code class=\"language-py\">nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nX = 2\r\n\r\nquick_sort(nums, X)\n</code></pre>\n<p>If the middle element is smaller than <code>X</code> the algorith will look in the left half of the list and if the <code>X</code> is bigger then it will look for in the right half of the list and goes on recursively until it finds the element.</p>\n<h3>Implementation</h3>\n<pre><code class=\"language-py\">def binary_search(arr, num):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    mid = 0\r\n\r\n    while low &#x3C;= high:\r\n        mid = (high + low) // 2\r\n        # calculate mid point of the list\r\n\r\n        if list1[mid] &#x3C; num:\r\n            low = mid + 1\r\n\r\n        elif list1[mid] > num:\r\n            high = mid - 1\r\n\r\n        else:\r\n            return mid\r\n\r\n    return\r\n\r\n\r\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\nnum = 2\r\n\r\nresult = binary_search(list1, num)\r\n\r\nif result:\r\n    print(f\"At index: {result}\")\r\nelse:\r\n    print(f\"Num not in list\")\r\n\n</code></pre>\n<p>This will print out the result <code>At index: 1</code> because the number <code>2</code> is at position 1 starting from 0.</p>\n","tags":["Data-Structures","Algorithms"]}},"__N_SSG":true}