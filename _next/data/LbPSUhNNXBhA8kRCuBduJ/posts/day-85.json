{"pageProps":{"post":{"title":"Day 85 - Semaphores","date":"2021-03-26","slug":"day-85","content":"<p>Until now we have seen two ways of solving the Critical Section Problem, By hardware and by software. Both of them have their own advantages and disadvantages. Today we will be learning about another way of solving the critical section problem and that is called <strong>Semaphores</strong>.</p>\n<h2>Semaphores</h2>\n<p>Semaphores is another way of preventing critical section problem to occur. It can be a variable or an abstract data type that is used to control access to common resources by the multiple processes. A semaphore is an integer variable that is used by oprocesses to send signal to other processes. It can only be accessed by the following two operations.</p>\n<ul>\n<li><strong>P (Wait or Down)</strong></li>\n<li><strong>V (Signal or Up)</strong></li>\n</ul>\n<p>The definations of both these functions are below.</p>\n<pre><code class=\"language-py\">def Wait(S):\r\n  while (S &#x3C;= 0):\r\n    # Do Something\r\n  S = S - 1\r\n\r\ndef Signal(S):\r\n  S = S + 1\n</code></pre>\n<p>Any change to both these operations must be executed individually and while some process is executing these operations no other process is allowed to make any chage during the execution.</p>\n<p>Semaphores are used to solve the critical section problem for <strong>n</strong> number of processes. The processes use a shared semaphore of <strong>mutex</strong> initialized to 1. This implementation is follows.</p>\n<pre><code class=\"language-py\">while True:\r\n  Wait(mutex)\r\n    # Critical Section\r\n  Signal(mutex)\r\n    # Remainder Section\n</code></pre>\n<p>Here a <em>mutex</em> is a shared semaphore that is initialized to 1. A process P0 will execute <code>Wait()</code> operation which will decrement the semaphore to 0 and it will enter the critical section. Now if some other process tries to enter critical section by executing <code>Wait()</code> it will not be able to do that because the semaphore is 0 and it will not increment to 1 until the process P0 complete it <code>Wait()</code> execution and then executes <code>Signal()</code>. <code>Signal()</code> will increment mutex to 1 so some process can enter the critical section now.</p>\n","tags":["Operating-Systems"]}},"__N_SSG":true}