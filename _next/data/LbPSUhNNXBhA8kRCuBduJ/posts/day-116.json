{"pageProps":{"post":{"title":"Day 116 - Comments, Variables & Types In Rust","date":"2021-04-26","slug":"day-116","content":"<p>In the last post we installed <code>rustc</code> or Rust compiler and wrote a little hello world program, compiled it and executed it and now we will be learning about the basics of Rust programming language. These include Variables, Comments, Types etc.</p>\n<h3>Comments</h3>\n<p>To write comments in Rust programming language we use double backslashes and triple if you want to write documentation comments. Documentation comments also support markdown syntax.</p>\n<pre><code class=\"language-rs\">// This is a comment in Rust\r\n// This is another comment\r\n/// This is a Documentation Comment\r\n/// And it supports Markdown syntax\r\n/// Like\r\n/// # Documentation\r\n/// [This is a Link](https://zainsci.github.io)\n</code></pre>\n<h3>Variables</h3>\n<p>To assign variables in Rust we use <code>let</code> keyword followed by the variable name and an equal sign <code>=</code> and the value of the variable. Rust is a statically and strongly typed language that means that you either tell the compiler what type a variable is or it will guess it self.</p>\n<pre><code class=\"language-rs\">fn main() {\r\n    let a: i32 = 10; // a is a 32-bit integer type\r\n    let b = 10; // b is also a 32-bit integer type\r\n}\n</code></pre>\n<p>Here <code>i32</code> is the interger type and it is a 32 bit integer. If you assign a variable again somewhere with the same name it will destroy the previous one and will store the new value with the new type in it.</p>\n<pre><code class=\"language-rs\">fn main() {\r\n    let a: i32 = 10;\r\n    let a: &#x26;str = \"Hello World!\";\r\n\r\n    println!(a); // Hello World!\r\n}\n</code></pre>\n<p>Another thing about variables in Rust is that all the variables assigend are immutable in Rust by default meaning that if you try to change the value of a variable it will throw an error tellin you that the variable is immutable.</p>\n<p>To go around this we can use a keyword <code>mut</code> after the <code>let</code> keyword to tell the compiler that this var is mutable and will be changed later in the program.</p>\n<pre><code class=\"language-rs\">fn main() {\r\n    let a = \"immutable\"; // This var is immutable\r\n    a = \"something\"; // Will throw an error\r\n\r\n    let mut b = \"mutable\"; // This var is mutable\r\n    b = \"something\"; // Will not throw an error\r\n}\n</code></pre>\n<p>But the compiler will also complain to you if you add <code>mut</code> before a var but didn't changed its value anywhere in the code.</p>\n<p>Rust compiler will also complain to you if there is a unused var in the program and to handle that error the complier will also tell you to add an underscore <code>_</code> before the var.</p>\n<pre><code class=\"language-rs\">fn main() {\r\n    let a = 1; // Error: unused variable\r\n    let _b = 1; // No error\r\n}\n</code></pre>\n<p>That's not all about variable theres more to them but for now this is all we need to have to take care of and now up to types.</p>\n<h3>Types In Rust</h3>\n<p>There are many types in Rust language and the ones that I may have read about for the first time myself but we will not be looking at all of them for now. We will onyl know some of them that will be enough for us to start working with Rust.</p>\n<ul>\n<li><strong>Boolean types</strong>\n<ul>\n<li>true - For truthy value</li>\n<li>false - For falsy value</li>\n</ul>\n</li>\n<li><strong>Integer types</strong>\n<ul>\n<li><strong>signed interger types</strong>\n<ul>\n<li><code>i8</code> - 8-bit integer from 0 to (2^7) - 1</li>\n<li><code>i16</code> - 16-bit integer from -(2^15) to (2^15) - 1</li>\n<li><code>i32</code> - 32-bit integer from -(2^31) to (2^31) - 1</li>\n<li><code>i64</code> - 64-bit integer from -(2^63) to (2^63) - 1</li>\n<li><code>i128</code> - 128-bit integer from -(2^127) to (2^127) - 1</li>\n</ul>\n</li>\n<li><strong>unsigned interger types</strong>\n<ul>\n<li><code>u8</code> - 8-bit integer from 0 to (2^8) - 1</li>\n<li><code>u16</code> - 16-bit integer from 0 to (2^16) - 1</li>\n<li><code>u32</code> - 32-bit integer from 0 to (2^32) - 1</li>\n<li><code>u64</code> - 64-bit integer from 0 to (2^64) - 1</li>\n<li><code>u128</code> - 128-bit integer from 0 to (2^128) - 1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Floating-Point numbers</strong>\n<ul>\n<li><code>f32</code> - binary32 floating-point numbers</li>\n<li><code>f64</code> - binary64 floating-point numbers</li>\n</ul>\n</li>\n<li><strong>Textual types</strong>\n<ul>\n<li><code>char</code> - Char type for unicode values</li>\n<li><code>&#x26;str</code> - String type for string values</li>\n</ul>\n</li>\n</ul>\n<p>Next will be funcions and some more basics.</p>\n","tags":["Rust","Programming-Language"]}},"__N_SSG":true}