{"pageProps":{"post":{"title":"Day 119 - Cargo Build System In Rust","date":"2021-04-29","slug":"day-119","content":"<p>Before we learn any more about the Rust Syntax there is one more thing that we should learn about and that is the Cargo Compiler that also comes with the <code>rustc</code> that we use to compile the Rust program. But whats the difference between <code>rustc</code> and <code>cargo</code>. The short answer is that the <code>rustc</code> is used to compile programs that are small and often are only one to some files big.</p>\n<p>On the other hand, If you want to code a big project which also require some external packages in the production, then you need to learn about the cargo compiler.</p>\n<h3>Cargo</h3>\n<p>Well actually cargo is not a compiler but a build system and a package manager just like <code>pip</code> in Python and <code>npm</code> in NodeJs. It handles many things for you like compiling your projects and downloading dependency packages for you from the web on which your project relies on and so on. To start with cargo first check if have it installed on your system.</p>\n<pre><code class=\"language-bash\">Linux>> cargo --version\r\ncargo 1.51.0 (43b129a20 2021-03-16)\n</code></pre>\n<p>After that lets create a new project with cargo and to do that we run cargo with <code>new &#x3C;project_name></code> as the arguments to it and it will creat the following files for us.</p>\n<pre><code class=\"language-bash\">Linux>> cargo new rust_hello\r\nCreated binary (application) `rust_hello` package\r\nLinux>> cd rust_hello\r\nLinux>> ls\r\n.gitignore      Cargo.toml      /src\n</code></pre>\n<p>In the <code>/src</code> directory it holds all your rust files and currently it only has one file called <code>main.rs</code> and in <code>Cargo.toml</code> is where you specifiy the metadata for your project.</p>\n<h3>Cargo.toml</h3>\n<p>If you open Cargo.toml file now it should look like this.</p>\n<pre><code class=\"language-toml\">[package]\r\nname = \"rust_hello\"\r\nversion = \"0.1.0\"\r\nauthors = [\"zainsci &#x3C;60652827+zainsci@users.noreply.github.com>\"]\r\nedition = \"2018\"\r\n\r\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\r\n\r\n[dependencies]\n</code></pre>\n<p>Here under the <code>[package]</code> is all the info about your project and under the <code>[dependencies]</code> you specify what packages you are using in your project.</p>\n<h3>Crates</h3>\n<p>Inside the Cargo.toml file and under the <code>[dependencies]</code> we write down the package name in Rust we call them crates and the cargo will download it when we run the command <code>cargo run</code>. It works just like <code>pip</code> in Python and <code>npm</code> in NodeJs.</p>\n<p>You first look for crates in the crates repository on the <a href=\"https://create.io\">Official Website</a>. You look for what crate you want to use in your project, you look for install section and find the name and version no that they specified, copy it and then write down it in the Cargo.toml file just like i did below.</p>\n<pre><code class=\"language-toml\">[dependencies]\r\nrand = \"0.7.3\"\n</code></pre>\n<p>Now i can start using the <code>rand</code> crate in our project.</p>\n<h3>Importing Crate In Our Projects</h3>\n<p>Importing modules in our file is just like you would do it in any other language. We use <code>use</code> keyword followed by the <code>&#x3C;crate_name>::prelude::*;</code> and thats it.</p>\n<p>We use the rand crate to generate a random number like this.</p>\n<pre><code class=\"language-rs\">use rand::prelude::*;\r\n\r\nfn main() {\r\n    let mut rng = rand::thread_rng();\r\n    let random: u8 = random.gen();\r\n\r\n\r\n    println!(\"Random Number: {}\", random)\r\n}\n</code></pre>\n<h3>Running Cargo</h3>\n<p>Now that we have coded our project and want to compile it and see the result all we have to do is run the <code>cargo run</code> command in the terminal and it will automatically run the compiled program for us.</p>\n<pre><code class=\"language-bash\">Linux>> cargo run\r\n    Compiling playground v0.0.1 (/playground)\r\n     Finished dev [unoptimized + debuginfo] target(s) in 1.02s\r\n      Running `target/debug/playground`\r\n238\n</code></pre>\n<p>Hope we learnd about what cargo is and how to work with it. Next time we will be taking a look at Rust Control FLow Statements like Loops and Ifs and Else.</p>\n","tags":["Rust","Programming-Langauge"]}},"__N_SSG":true}