{"pageProps":{"post":{"title":"Day 122 - Structs And Traits In Rust","date":"2021-05-02","slug":"day-122","content":"<p>A struct or structure is a custom Data Type that is a collection of related values that are put together to form a meaningful group. They are simillar to Object attributes as in Object Oriented Languages. Structs in Rust are simillar to how we define them in C and C++ but structs in Rust can do more than structs in C and C++.</p>\n<h3>Structs</h3>\n<p>To define a struct in Rust we use the struct keyword followed by the name of the struct and then <code>{}</code> and inside these we put the values that are related to the struct.</p>\n<pre><code class=\"language-rs\">struct SuperHero {\r\n    name: String,\r\n    hero_name: String,\r\n    age: u32,\r\n    active: bool,\r\n}\n</code></pre>\n<p>To use the struct we define a variable to which we will assign the struct with the name and age value inside the <code>{}</code> which we can later use in other places.</p>\n<pre><code class=\"language-rs\">let bruce = SuperHero {\r\n    name: String::from(\"Bruce\"),\r\n    hero_name: String::from(\"Batman\"),\r\n    age: 30,\r\n    active: true,\r\n};\n</code></pre>\n<p>We can use the dot notation to reference a property of the struct and can also use the dot notation to update the property of the Person.</p>\n<pre><code class=\"language-rs\">bruce.name // Bruce\r\nbruce.name = String::from(\"Bruce Wayne\");\r\nbruce.name // Bruce Wayne\n</code></pre>\n<p>But to allow the values of a struct to be updates later, the instance must be mutable.</p>\n<pre><code class=\"language-rs\">let mut bruce = SuperHero {\r\n    // ...\r\n};\n</code></pre>\n<h3>Creating Instaces With Values From Other Instances</h3>\n<p>We can also create instances from other inctances with sharing the values of other instances as well. For example:</p>\n<pre><code class=\"language-rs\">let mut clark = SuperHero {\r\n    name: String::from(\"Clark Kent\"),\r\n    hero_name: String::from(\"SuperMan\"),\r\n    ..bruce\r\n};\n</code></pre>\n<p>Now clark will inherit the same values as the bruce except the ones we defined ourselves like <code>name</code> and <code>hero_name</code>. This show that <code>clark</code> is the same age as <code>bruce</code> and is also active.</p>\n<h3>Struct Methods</h3>\n<p>As said before that Rust structs are much more than the C and C++ becuase we can implement methods on the struct that we can call on the strcut to modify some value inside the instance of the struct. We implement a method by using <code>impl</code> keyword and after that the name of the struct on which we want to implement it and then inside the <code>{}</code> we define a new function with <code>&#x26;self</code> as the first argument which represents the instance itself just like the keyword <code>self</code> in Python and <code>this</code> in JavaScript.</p>\n<pre><code class=\"language-rs\">impl Hero {\r\n    fn say_my_name(&#x26;self) {\r\n        println!(\"{}\", slef.name)\r\n    }\r\n}\n</code></pre>\n<pre><code class=\"language-rs\">bruce.say_my_name() // Bruce Wayne\n</code></pre>\n<h3>Tuple Struct</h3>\n<p>Rust also have Tuple Struct which we define the same way but without any name and <code>{}</code>.</p>\n<pre><code class=\"language-rs\">struct RGB(i32, i32, i32);\r\n\r\nlet black = RGB(0, 0, 0);\n</code></pre>\n<p>We can reference a value of the tuple struct by using its index number with dor notation.</p>\n<pre><code class=\"language-rs\">black.0 // 0\r\nblack.1 // 0\r\nblack.2 // 0\n</code></pre>\n<p>And that all for Struct. This one was a little simple for me to understand as I have worked with struct before in C while learning about Linked Lists and Hash Tables but still Rust struct are more powerful than they are in C and maybe some other languages.</p>\n","tags":["Rust","Programming-Language"]}},"__N_SSG":true}