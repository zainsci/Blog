{"pageProps":{"post":{"title":"Day 59 - Jump Search Algorithm","date":"2021-02-28","slug":"day-59","content":"<p>Last day's algorithm which was a searching algorithm was much simpler to understand than the sorting algorithms I learned some days before and today I learned another simple algorithm which is also a searching algorithm. This algorithm is called Jump Search.</p>\n<h2>Jump Search Algorithm</h2>\n<p>Jump Search algorithm is a simple searching algorithm. Just like Binary Search it takes a sorted list as the input with the number element to look for. It searches through the list by jumping of a set number of elements from the list. It is a fairly simple algorithm to understand as well as to implement it.</p>\n<h3>How Jump Search Works?</h3>\n<p>Jump Search takes a sorted array as input with the element to look for. Let this element be <code>x</code>. Then it loops through the sorted array and jumps <code>n</code> elements until it finds the element that is bigger than <code>x</code> and also remembers the last element it jumped. After finding the element that is bigger than <code>x</code> it will perform a liner search between the last jumped element and the bigger element.</p>\n<p>Linear search is also a searching algorithm which loops throuhg the whole list a checks every element until it find the one it was looking for. For worst case scenario Linear search takes <code>O(n)</code> time and in best case O(1) or contast time.</p>\n<h3>Implementation</h3>\n<p>The implementation below is done in Python.</p>\n<pre><code class=\"language-py\">import math\r\n\r\n\r\narr = [1,2,3,4,5,6,7,8,9]\r\nX = 5\r\n\r\n\r\ndef jump_search(arr, num):\r\n  jmp = math.floor(math.sqrt(len(arr)))\r\n  jmp_prev = 0\r\n\r\n  while arr[jmp] &#x3C; num:\r\n    jpm_prev = jmp\r\n    jmp += jmp\r\n\r\n    if jmp_prev > len(arr):\r\n      return\r\n\r\n  while arr[jmp_prev] &#x3C; num:\r\n    jmp_prev += 1\r\n\r\n    if jmp_prev == jmp:\r\n      return\r\n\r\n  if arr[jmp_prev] == num:\r\n    return jmp_prev\r\n\r\n  return\r\n\r\nres = jump_search(arr, X)\r\n\r\nif res:\r\n  print(f\"At Index: {res}\")\r\nelse:\r\n  print(f\"Num Not In List\")\n</code></pre>\n<h3>Time Comlpexity</h3>\n<p>The Time Complexity for Jump Search is <code>O(âˆšn)</code> which is faster than Linear Searhc but Slower than the Binary search.</p>\n","tags":["Data-Structures","Algorithms"]}},"__N_SSG":true}