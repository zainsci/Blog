{"pageProps":{"post":{"title":"Day 123 - Error Handling In Rust","date":"2021-05-03","slug":"day-123","content":"<p>Nothing is Perfect and that includes the code that we programmers write everyday, seven days of the week and most of the year. This code we write will not always be perfect even if we check it thousand time. It will cause errors and tell us that something have gone wrong and we should fix it.</p>\n<p>It is because of these errors that we are able to know whats wrong with our code. But these errors can also give information about our program to the ones with bad intentions. In order to void this from happening we do <strong>Error Handling</strong> in our code so that we can handles these errors beforehand and prevent the program from giving info to unwanted people or to prevent it from crashing.</p>\n<h3>Error Handling In Rust</h3>\n<p>Rust as any other language also provide ways to handle these errors in the code. It allows us to take actions before the code compiles.</p>\n<p>Rust specifies errors in to two categories, <em>recoverable</em> and <em>unrecoverable</em> errors.</p>\n<ul>\n<li><strong>Recoverable Errors</strong> are errors that the program does not crashes and restarts itself while also telling the user about the error.</li>\n<li><strong>Unrecoverable Errors</strong> are errors that will casue the program to crash.</li>\n</ul>\n<h3>Recoverable Errors</h3>\n<p>Recoverable errors are errors that are not serious enough for the program to stop working and instead shows the error to the user and restarts the task. To handle Recoverbale errors in Rust we use <code>Result</code> or <code>Option</code> enum which looks something like this.</p>\n<pre><code class=\"language-rs\">enum Result&#x3C;T, E> {\r\n  Ok(T),\r\n  Err(E),\r\n}\r\n\r\nenum Option&#x3C;T> {\r\n  Some(T),\r\n  None,\r\n}\n</code></pre>\n<p>Suppose we want to open a file in our program but it could happen that the file we are trying to open does not exist. Rust instead of crashing the program will cause a recoverable error. This is beasue it may be that if the file doesn't exist we may also want to create it.</p>\n<p>These two enums <code>Result</code> and another one called <code>Option</code> are used to recover these Errors. In the file example we use the Result enum to handle the error.</p>\n<pre><code class=\"language-rs\">use std::fs::File;\r\n\r\nfn main() {\r\n  let f = File::open(\"file.txt\");\r\n\r\n  let f = match f {\r\n    Ok(file) => file,\r\n    Err(e) => panic!(\"{}\", e),\r\n  }\r\n}\n</code></pre>\n<h3>UnRecoverable Errors</h3>\n<p>Unrevocerable errors are errors that will cause the program to crash and we cannot recover the state of the program. For example we have an array of 5 items and if we try to get item at index 6 it will cause an error called a <code>panic</code> and will crash the program.</p>\n<pre><code class=\"language-rs\">fn main() {\r\n  let a = vec![1,2,3,4,5];\r\n\r\n  a[6]; // Rust will panic! here\r\n}\n</code></pre>\n<p>We can also crash the program ourselves if we want to or if something unexpected happens by using the <code>panic!</code> macro.</p>\n<pre><code class=\"language-rs\">fn main() {\r\n  let a: i32 = 1;\r\n\r\n  if a == -1 {\r\n    panic!(\"Exit out!\");\r\n  } else {\r\n    println!(\"{}\", a);\r\n  }\r\n}\n</code></pre>\n<p>Before writing this article I though that the Error handeling in Rust would be simillar to what we do in Python but I was wrong. So this article is a little incomplete and may need some update in the future.</p>\n","tags":["Rust","Programming-Language"]}},"__N_SSG":true}