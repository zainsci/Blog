{"pageProps":{"post":{"title":"Day 81 - Process Synchronization And Race Condition","date":"2021-03-22","slug":"day-81","content":"<p>This post was intended to be about how CPU scheduling works in Windows Operating System but that is for another day maybe but for today it will be about Process Synchronization and Race Condition.</p>\n<h2>Process Synchronization</h2>\n<p>Process synchronization deals with mechanisms to ensure the proper execution of all the process that share same logical address. Its basic purpose is to maintain data consistency. A cooperating process is a process that is affected or can be affected by another process executing in the same system.</p>\n<p>Conxcurrently running processes without any sort of data protection scheme can manipulate data and produce an incorrect result. So we need to implement a mechanism to prevent this from happening by synchronizing processes. When more than two processes share and manupulate same data a <strong>Race Condition</strong> occurs.</p>\n<h2>Race Conditions</h2>\n<p>A race condition is a situation in which more than one process access and manipulate shared data at the same time. The final value of the shared data depends upon which process finishes at last. To prevent race conditions, processes running at the same time must be synchronized.</p>\n<p>Consider the following procedure.</p>\n<pre><code class=\"language-py\">def deposit(amount):\r\n  balance = balance + amount\n</code></pre>\n<p>Here we assume that the <code>balance</code> variable is shared by multiple processes. If two processes call the <code>deposit()</code> at the same time, something that you don't want to happen, can happen. The statement <code>balance = balance + amount</code> is implemented by the following sequence of instructions.</p>\n<pre><code class=\"language-asm\">Load  Reg, balance    ; loads the previous balance in register\r\nAdd   Reg, amount     ; add the amount\r\nStore Reg, balance    ; updates the calculated amount back in balance\n</code></pre>\n<p>Now lets suppose that two process, P1 and P2 call the function <code>deposit()</code> at the same time with P1 as <code>deposit(10)</code> and P2 as <code>deposit(20)</code>. The initial balance is 100 and both processes run on different CPUs. It could happen like this:</p>\n<p>P1 loads 100 into its register\r\nP2 loads 100 into its register\r\nP1 adds 10 to its register, giving 110\r\nP2 adds 20 to its register, giving 120\r\nP1 stores 110 in balance\r\nP2 stores 120 in balance</p>\n<p>But that is not what we want. We wanted it to output 130. This bug is called a <strong>race condition</strong> and this kind of bug is very difficult to debug as it occurs rarely and may disappear when you are trying to debug it. The only way to prevent this is through very careful coding. Some systems contains constructs called <strong>synchronization primitives</strong> to prevent this bug from occuring.</p>\n","tags":["Operating-Systems"]}},"__N_SSG":true}