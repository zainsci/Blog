{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-83/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"4225184e-bfa4-5256-aac7-36a4c4d666fe","excerpt":"Last time we learned about the Critical Section problem and how we can hanlde it in operating systems. Today we will be learning about how we can solve theâ€¦","html":"<p>Last time we learned about the Critical Section problem and how we can hanlde it in operating systems. Today we will be learning about how we can solve the critical section problem at the hardware level. Critical Section Problem can be easily solved on the hardware-level and is much difficult on the software-level as we can have physical barriers to solve the problem.</p>\n<p>The critical section problem can be solved in a single processor system at hardware level. We can stop interrupts to occur modification of shared variable so that the instruction can be executed without preemption. This solution is not applicable in multiprocessor system becasue disabling of interrupts is time consuming.</p>\n<p>Many machines provide hardware instruction to test and modify a word and swap the contents of the words automatically without any interruption. The TestAndSet instruction is executed atomically.</p>\n<p>The defination of TestAndSet is follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    rv <span class=\"token operator\">=</span> target\n    target <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> rv</code></pre></div>\n<p>A machine that supports TestAndSet instruction, can implement mutual exclusion by using a boolean variable lock, initialized as false. The structure of such implementation is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> TestAndSet<span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Critical Section</span>\n    lock <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token comment\"># Remainder Section</span></code></pre></div>\n<p>The Swap instruction is also executed atomically and operates on two words to interchange their contents.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    temp <span class=\"token operator\">=</span> a\n    a <span class=\"token operator\">=</span> b\n    b <span class=\"token operator\">=</span> temp</code></pre></div>\n<p>This way by using the boolean varibale we can halt the execution of more than one process that is using the same data.</p>\n<h2>Memory Barriers</h2>\n<p>There are two types of memory models that are implemented in computer architectures. <strong>Strongly</strong> and <strong>Waekly</strong> ordered.</p>\n<ul>\n<li><strong>Strongly ordered.</strong> In which the memory modification on one processor is immediately visible on all other processors.</li>\n<li><strong>Weakly ordered.</strong> In which memory modification on one processor may not be immediatelt visible on all other processors.</li>\n</ul>\n<p>Memory models vary by different processors types so code written for one kernel may not work for some processors. To address this issue, computer architectures provide instructions that can <em>force</em> any change in memory to be propagated to all other processors in the system. These instructions are called <strong>Memory Barrirs</strong>.</p>\n<p>When memory barrier instruction is performed, the system ensures that all loads and stores are completed before future loads and store operations are performed.</p>","frontmatter":{"title":"Day 83 - Hardware Solution To Process Synchronization","date":"March 24, 2021","description":null,"tags":["Operating-Systems"]}},"previous":{"fields":{"slug":"/day-82/"},"frontmatter":{"title":"Day 82 - The Critical Section Problem"}},"next":{"fields":{"slug":"/day-84/"},"frontmatter":{"title":"Day 84 -  Peterson's Solution To Critical Section Problem"}}},"pageContext":{"id":"4225184e-bfa4-5256-aac7-36a4c4d666fe","previousPostId":"3b3610aa-4980-565b-8a27-fbcc51ed442c","nextPostId":"f1cb9a61-6a4f-574d-adff-05b17fb57b34"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}