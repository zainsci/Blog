{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-120/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"f0d91280-de2a-55c8-a24e-62b4b72ca3f7","excerpt":"Now that we know some basics of Rust and how to import and use packages called crates and now we will be taking a look at Rust Control Flow. Things like Ifâ€¦","html":"<p>Now that we know some basics of Rust and how to import and use packages called crates and now we will be taking a look at Rust Control Flow. Things like If statements, Loops etc. If statements and loops in Rust have a syntax simillar to Python but added with curly braces. Now lets get to it.</p>\n<h2>If-Else Statements</h2>\n<p>If-Else statements in Rust are the same as any other language but with a small difference. In other languages like C and C++ we use to contain conditions in paranthesis but in Rust we write conditions the way we write in Python and after than curly braces and inside those we write the code that needs to be executed if it meet the conditions.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">fn main() {\n    let num = 8;\n\n    if num &gt; 20 {\n        println!(&quot;Bigger than 20&quot;);\n    } else if num &gt; 10 {\n        println!(&quot;Smaller than 20 But Bigger than 10&quot;);\n    } else {\n        println!(&quot;Smaller Than 10&quot;);\n    }\n}</code></pre></div>\n<p>We can use else statements and if statements with else statements to control the flow of the program. We can also return a value from if statements and store them in variables like so.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">fn main() {\n    let age = 50;\n\n    let id_old = if age &gt; 40 {\n        true\n    } else {\n        false\n    }\n}</code></pre></div>\n<h2>Switch Stetements</h2>\n<p>Rust does not have a switch keyword but there is one way to do switch statements in Rust and that is using match. Match looks for a condition and will run the statement inside it which meets that condition.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">fn main() {\n    let age = 20;\n\n    match age {\n        15 =&gt; println!(&quot;15&quot;),\n        16 =&gt; println!(&quot;16&quot;),\n        17 =&gt; println!(&quot;17&quot;),\n        18 =&gt; println!(&quot;18&quot;),\n        n if n &gt; 65 =&gt; println!(&quot;Retired&quot;),\n        _ =&gt; println!(&quot;Invalid&quot;) // Else Statement\n    }\n}</code></pre></div>\n<h2>Loops</h2>\n<p>Now next thing in Control Flow is Loops. Infinite Loops in Rust is quite simple than any other language that I know of so far. You just use loop keyword and it will start infinite loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">fn main() {\n    let mut i = 0;\n\n    loop {\n        if i == 10 {\n            break;\n        }\n\n        println!(&quot;{}&quot;, i);\n        i += 1;\n    }\n}</code></pre></div>\n<p>you can capture the output from a loop assigning the loop to a variable the same way we did with the if and else statements.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">let mut i = 0;\n\nlet high_num = loop {\n    if i == 100 {\n        break i;\n    }\n\n    i += 1;\n};</code></pre></div>\n<h3>While Loops</h3>\n<p>Same as anyother language.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">let mut i = 0;\n\nwhile i &lt; 65 {\n    i += 1;\n}</code></pre></div>\n<h3>For Loops</h3>\n<p>Rust do for loops a little different than other languages.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">for i in (0..100) {\n    println!(&quot;{}&quot;, i);\n}</code></pre></div>\n<p>For loops will by default increment the counter by one but if you want you can use <code class=\"language-text\">step_by()</code> to step as many times as you want.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">for i in (0..100).step_by(2) {\n    println!(&quot;{}&quot;, i);  // 0, 2, 4, 6, 8, ...\n}</code></pre></div>","frontmatter":{"title":"Day 120 - Control Flow In Rust","date":"April 30, 2021","description":null,"tags":["Rust","Programming-Language"]}},"previous":{"fields":{"slug":"/day-119/"},"frontmatter":{"title":"Day 119 - Cargo Build System In Rust"}},"next":{"fields":{"slug":"/day-121/"},"frontmatter":{"title":"Day 121 Enums In Rust"}}},"pageContext":{"id":"f0d91280-de2a-55c8-a24e-62b4b72ca3f7","previousPostId":"040dd718-1af8-50ff-a41b-0050815362c7","nextPostId":"ba58b20d-a5a0-5e41-88f8-7f28f3ba437d"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}