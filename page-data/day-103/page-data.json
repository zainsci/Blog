{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-103/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"4456d2e7-c4fb-56bc-bdbb-9ce6cbb22cc5","excerpt":"We know that in order for a process to execute it has to be in memory and in memory it is assigned to a physical address space from which a CPU can fetch it to…","html":"<p>We know that in order for a process to execute it has to be in memory and in memory it is assigned to a physical address space from which a CPU can fetch it to execute. A process can change these places in memory for some reasons. These reasons are following.</p>\n<ul>\n<li>A process must be unloaded from the memory if its CPU time has ended. It can be reloaded back into the memory to complete its execution. This loading and unloading gives time to other processes to execute.</li>\n<li>A process must be unloaded from the memory if it enters block state by calling some I/O function. It is them added into block queue to be loaded later.</li>\n<li>The process may change its position if compaction is applied.</li>\n</ul>\n<p>In all the above cases, the process is being reallocated in memory. It must be possible for a process to be loaded at any address selected by the operating system.</p>\n<p>When a process is loaded into the memory its first physical address location is put into the base register. All process addresses are interpreted as being relative to this base address. Now to map the address a to the physical location in the memory the OS add the address a to the base register B.</p>\n<p>Suppose the base address is 1000 and a <code class=\"language-text\">JUMP 100</code> instruction is encountered. Now the physical address of the jump instruction is 1000 + 100 = 1100.</p>\n<p>By this mechanism the process is reallocated by just moving the process to a different place int he memory and setting the base register value to an appropiate location.</p>\n<ul>\n<li>A <strong>limit register</strong> is used know what is the highest memory location a process can access in order for other processes to protect them from other process’s interference.</li>\n<li>A <strong>logical address</strong> is a relative location to the first address of the process. All the instrucitons in the progams are logical addresses.</li>\n<li>A <strong>physical address</strong> is the actual space in the memory.</li>\n</ul>\n<div style=\"text-align: center; font-size: 2rem\">\n<p><a href=\"https://zainsci.github.io/ramadan\">Happy Ramadan To All Of You.</a></p>\n</div>","frontmatter":{"title":"Day 103 - Logical vs. Physical Address Space","date":"April 13, 2021","description":null,"tags":["Operating-Systems"]}},"previous":{"fields":{"slug":"/day-102/"},"frontmatter":{"title":"Day 102 - Memory Allocation Methods"}},"next":{"fields":{"slug":"/day-104/"},"frontmatter":{"title":"Day 104 - Paging"}}},"pageContext":{"id":"4456d2e7-c4fb-56bc-bdbb-9ce6cbb22cc5","previousPostId":"e8d32829-b65f-598d-a0de-f8deaa8b8bd4","nextPostId":"1ed572d7-7923-513f-870f-d21a73677a80"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}