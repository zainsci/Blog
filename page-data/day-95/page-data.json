{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-95/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"74d44ef7-cc33-51ea-9c86-f81592d761a3","excerpt":"This is the last post about deadlocks and in this we will be learning about how to recover from deadlocks. When a deadlock detection algorithm detects aâ€¦","html":"<p>This is the last post about deadlocks and in this we will be learning about how to recover from deadlocks. When a deadlock detection algorithm detects a deadlock in the system we must recover from it. Several alternatives can help us for recovering from deadlocks.</p>\n<p>There are two ways to recover from the deadlocks, <strong>manually</strong> and <strong>automatically</strong>. If a deadlock appears in the system we can either tell the operator to handle it or let the system recover from it by himself.</p>\n<p>There are two options for breaking a deadlock.</p>\n<ul>\n<li>Abort some therads to break circular wait.</li>\n<li>Preempt some resources from one or more deadlock threads.</li>\n</ul>\n<h3>Process And Thread Termination</h3>\n<p>There are two ways to abort or terminate a process when there is a deadlock in a system. Either terminate all the process in the deadlock or one at a time.</p>\n<ul>\n<li><strong>Terminating all the process at the same time can be expensive.</strong> There may be many processes in the deadlock that may have done a lot of computing which will go to waste if we terminate all the processes. These computations have to be computed again by the porcesses.</li>\n<li><strong>Terminating one process at a time until the deadlock is eleminated.</strong> This too have its own ups and downs as we have to know what process in the deadlock should we terminate to avoid less computation to go to waste and also the detection algorithm is again invoked to check if there is still a deadlock in the system.</li>\n</ul>\n<p>Terminating a deadlock process is not an easy thing to do. There may be some process in the deadlock that is writing to a file, terminating the process can leave the file in an incorrect state. Or a process could be holding a mutex lock.</p>\n<h3>Resource Preemption</h3>\n<p>This way of deadling with deadlocks is to preempt the resources from one process to give these resources to some other process until the deadlock is terminated. We take resources from a waiting process and give it to some other process. We can then either terminate the process or we have to roll it back to some previous state so it can ask for resources again to complete its execution.</p>\n<p>Following are some factors to consider when preempting resources.</p>\n<h4>Selection Of Vcitim</h4>\n<p>Selection of victim is the most important task in preempting a process. To preempt a process we have to consider how much time it consumed or how many resources it is holding right now.</p>\n<h4>Rollback</h4>\n<p>When a process is preempted it cannot function properly so we have to roll it back to some safe state so it can be restarted later.</p>\n<h4>Starvation</h4>\n<p>We must ensure that no one process is selected victim for more than the limit amount in order to prevent the process from entering into starvation state.</p>","frontmatter":{"title":"Day 95 - Recovering From Deadlocks","date":"April 05, 2021","description":null,"tags":["Opearating-Systems"]}},"previous":{"fields":{"slug":"/day-94/"},"frontmatter":{"title":"Day 94 - The Banker's Algorithm"}},"next":{"fields":{"slug":"/day-96/"},"frontmatter":{"title":"Day 96 - Coding Interview Question [FizzBuzz]"}}},"pageContext":{"id":"74d44ef7-cc33-51ea-9c86-f81592d761a3","previousPostId":"afe26533-0e5a-55ba-9c8d-fcb9db6c215e","nextPostId":"8147e096-5713-5b59-817d-2059f299f0a2"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}