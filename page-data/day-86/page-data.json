{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-86/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"60270e12-6681-50f2-90b6-a448cfee5326","excerpt":"So far we have learned about Race Conditions, Critical Section Problem and its solutions in process synchronization bu now we will be learning about anotherâ€¦","html":"<p>So far we have learned about Race Conditions, Critical Section Problem and its solutions in process synchronization bu now we will be learning about another problem in the process synchronization called The Dining-Philosophers Problem which was proposed by the famous Programmer Edsger Dijkstra.</p>\n<h2>The Dining-Philosophers Problem</h2>\n<p>Consider there are five diners who spend their lives just thinking and eating. They share a circular table with five chairs around it, each belonging to one philosopher. There is a bowl of rice in the middle of the table. Each philosopher has one chopstick placed on their right side, A total of five chopsticks. Whenever a philosopher gets hungry, he picks one chopstick from its right and the other one from its left and starts eating rice and when he finishes, places the chopsticks on both sides from where he picked them and start thinking again.</p>\n<p>A philosopher cannot pick two chop sticks if some other is already eating with two chopsticks. It is classic synchronization problem. It is a simple representation of the nedd to allocate several resources among several processes in a starvation-free and deadlock-free manner.</p>\n<p>There are many solutions to Dining-Philosophers Problem but we will be looking at only one which we have already learned about.</p>\n<h3>Semaphore Solution To Dining Philosophers Problem</h3>\n<p>One way to represent this problem is to represent each chopstick as a semaphore. When a philosopher has to pick up a chopstick he can do so by executing the <code class=\"language-text\">Wait()</code> operation and when he wants to release the chopsticks he can do so by executing the <code class=\"language-text\">Signal()</code> operation.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n  Wait<span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  Wait<span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># Eat for a while</span>\n\n  Signal<span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  Signal<span class=\"token punctuation\">(</span>chopstick<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\"># think for awhile</span></code></pre></div>\n<p>This solution works but in some situtaion it can cause a dealock where every philosopher have picked the chopstick on its left and is waiting for other philosopher to release the chopstick. This can cause all the philosopher to starve to death.</p>\n<p>There are some possible remedies to the deadlock problem.</p>\n<ul>\n<li>Allow only four philosophers to be sitting at the table at the same time</li>\n<li>Allow only the philosopher to pick up chopstick only if both chopsticks on his left and right are present</li>\n</ul>\n<p>No matter what way you try to handle the deadlock situation there will be most likely one philosopher that will starve because of not having to pick up both chopsticks.</p>","frontmatter":{"title":"Day 86 - The Dining-Philosophers Problem","date":"March 27, 2021","description":null,"tags":["Operating-Systems"]}},"previous":{"fields":{"slug":"/day-85/"},"frontmatter":{"title":"Day 85 - Semaphores"}},"next":null},"pageContext":{"id":"60270e12-6681-50f2-90b6-a448cfee5326","previousPostId":"1bf660cd-9689-587d-9220-e22966cece84","nextPostId":null}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}