{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-43/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"692bbb99-906b-58b2-8526-26407816b1c4","excerpt":"There is this command called  that I wrote about in Day 36. It is used to find all the matches of a given text or regex from the given text file or from the…","html":"<p>There is this command called <code class=\"language-text\">grep</code> that I wrote about in <a href=\"/blog/day-36/\">Day 36</a>. It is used to find all the matches of a given text or regex from the given text file or from the output of some other command. If a single word like <code class=\"language-text\">email</code> is typed as the argument to grep it will only look got that word and nothing more but that is not helpful at all when you want to search for text that you don’t even know what it is or looks like. For example you want to find all the emails from a large text and some have .edu or other domain in front of them then it will be very difficult to extract all the emails from that file without lossing some.</p>\n<p>Thats where Regular Expressions or regex comes to help. Regular Expressions are used to look for patterns in a large text and extract them. <code class=\"language-text\">grep</code> uses regex to find all the text that matches the regex pattern. In case of searching for emails using regex will make them easily extractable because all emails follow a same pattern, emailname@provider.topleveldomain.</p>\n<h2>What Are Regular Expressions?</h2>\n<p>Regular Expressions or more easy to read regex are sequence of characters that define a search pattern to find text from a large files of text. The concept of regex is as old as the FORTRAN Programming Language or maybe older.</p>\n<p>Regex is mostly used to validate user data and search through a lrage body of text. A simple use case is validating emails when signing up or logging in to a website and the website checks if the entered emails follows the pattern.</p>\n<h2>Regex Syntax</h2>\n<p>I will be using grep command to look for patterns in the text of my post of Day36 and will do regex with examples.</p>\n<h3>Matching Words</h3>\n<p>First I will look for all the words that have “th” at the end of the word in the text file called day36.txt using grep and later will explain the pattern that I wrote to do so. To write the regex in the grep use double quotes and write the expression in them.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:~$ <span class=\"token function\">grep</span> <span class=\"token string\">\"[a-zA-Z]*th \"</span> day36.txt\nwith\npath\nfifth</code></pre></div>\n<p>This is read like this: One or more characters (<code class=\"language-text\">*</code>) that are between the range <code class=\"language-text\">a to z</code> and <code class=\"language-text\">A to Z</code> (<code class=\"language-text\">[a-zA-Z]</code>) followed by <code class=\"language-text\">th</code> and a single space.</p>\n<ul>\n<li><strong><code class=\"language-text\">[]</code></strong> Mathces a single character from the characters that are inside the brackets\nIf I only add a inside the brackets like this <code class=\"language-text\">[a]</code> it will only look for a single <code class=\"language-text\">a</code></li>\n<li><strong><code class=\"language-text\">*</code></strong> Asterisk after the brackets matches one or more character that are inside the brackets</li>\n<li><strong><code class=\"language-text\">a-z</code></strong> This means match characters between <code class=\"language-text\">a</code> to <code class=\"language-text\">z</code>.</li>\n<li><strong><code class=\"language-text\">A-Z</code></strong> This means match characters between <code class=\"language-text\">A</code> to <code class=\"language-text\">Z</code>.</li>\n</ul>\n<p>Now if I replace <code class=\"language-text\">th</code> with <code class=\"language-text\">l</code> follwing will be the output.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:~$ <span class=\"token function\">grep</span> <span class=\"token string\">\"[a-zA-Z]*l \"</span> day36.txt\nwill\nall\nuseful\npeaceful\nterminal</code></pre></div>\n<p>All the letters ending with <code class=\"language-text\">l</code>.</p>\n<h3>Searching For Domains</h3>\n<p>This expression will look for all the domain names inside the text file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:~$ <span class=\"token function\">grep</span> <span class=\"token string\">\"^[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\"</span> day36.txt\nwikipedia.com\ngoogle.com\nwikimedia.org\ngithub.com\nzainsci.github.io/blog\nanother.blah\nnewfile.txt\nsome.com.au.aus.australia\nwikipedia.com\ngoogle.com\ngithub.com\nsome.com.au.aus.australia\nzainsci.github.io/blog\nzainsci.github.io/blog</code></pre></div>\n<p>You see that it will not inclue <code class=\"language-text\">fake-site.com</code> in the results because <code class=\"language-text\">-</code> inside the brackets is a special character and to include the special characters to search for you have to escape them like I did for <code class=\"language-text\">.</code> in the expression.</p>\n<ul>\n<li><strong><code class=\"language-text\">^</code></strong> This means the starting position of the line</li>\n<li><strong><code class=\"language-text\">\\.</code></strong> <code class=\"language-text\">\\</code> (Back Slash) to escape the <code class=\"language-text\">.</code> (Dot) because dot in regex means any character.</li>\n</ul>\n<p>So if I didn’t excaped the dot the result would have been the full file.</p>\n<h3>Not Mathcing Any Letter</h3>\n<p>Adding <code class=\"language-text\">^</code> inside the brackets will cause the expression to look for all the character that does not match the characters inside the brackets</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:~$ <span class=\"token function\">grep</span> <span class=\"token string\">\"[^a-zA-Z0-9]\"</span> day36.txt\n~\n<span class=\"token builtin class-name\">.</span>\n<span class=\"token punctuation\">\\</span>\n/\n<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">)</span>\n-</code></pre></div>\n<p>These are all the symbols that are written inside the text file.</p>\n<h3>Matching Word Between Mentioned Numbers</h3>\n<p>To match words that are in the specifeid length in the text file I will use the following expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:~$ <span class=\"token function\">grep</span> <span class=\"token string\">\" [a-z]{5} \"</span> day36.txt\nfifth\nother\nabout\nneeds\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>This is like “find all words of length five between a and z”</p>\n<ul>\n<li><strong><code class=\"language-text\">{min, max}</code></strong> Curly Brackets define the range of letter to look for</li>\n<li><strong><code class=\"language-text\">{5}</code></strong> = five characters</li>\n<li><strong><code class=\"language-text\">{5, 9}</code></strong> = five to nine characters</li>\n<li><strong><code class=\"language-text\">{5,}</code></strong> = more than five characters</li>\n<li><strong><code class=\"language-text\">{,5}</code></strong> = less or five characters</li>\n</ul>\n<p>And that’s it for now because Regex can be much difficult to learn in one day, SO more of it tomorrow.</p>","frontmatter":{"title":"Day 43 - Learning Regular Expressions","date":"February 12, 2021","description":null,"tags":["Linux"]}},"previous":{"fields":{"slug":"/day-42/"},"frontmatter":{"title":"Day 42 - Nertwork Scanning With Nmap"}},"next":{"fields":{"slug":"/day-44/"},"frontmatter":{"title":"Day 44 - Explaning RegEx Syntax"}}},"pageContext":{"id":"692bbb99-906b-58b2-8526-26407816b1c4","previousPostId":"c5fd6605-6772-566e-b416-65446dd292c9","nextPostId":"e9efdae8-43fb-5a5c-bf60-a8c0861e8350"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}