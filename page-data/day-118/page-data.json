{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-118/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"f1ed0d63-7146-5f3d-a023-cbaaef03c238","excerpt":"We now know how to assign variables, how to write comments and work with functions in Rust and now comes a concept that is unique to Rust Programming Languageâ€¦","html":"<p>We now know how to assign variables, how to write comments and work with functions in Rust and now comes a concept that is unique to Rust Programming Language and that is Ownership. Ownership in Rust guarantees memory safety without the use of any Garbage Collector. We will look into what owendership is, what is borrowing and how Rust works with the memory.</p>\n<h3>Ownership</h3>\n<p>In other programming languages like C or C++ we have allocate memory ourselves to do some tasks and also you had to free the memroy yourself too. This not freeing memory can cause memory leaks and performance issues in the program. But Rust is different from these languages. Rust manages the memory with the help of the concept called Ownership while not slowing down the program.</p>\n<p>Ownership is simple words is that every variable to which a value is assigned is the owner of that value and there can only be one owner at a time and when ever the owner goes out of scope, the value is droppped. To explain it in detail consider the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">fn main() {\n    let name = String::from(&quot;Rust&quot;);\n\n    print_name(name);\n\n    println!(&quot;First: {}&quot;, name);\n}\n\nfn print_name(name: String) {\n    println!(&quot;Second: {}&quot;, name);\n}</code></pre></div>\n<p>We are using the type <code class=\"language-text\">String</code> here becuase the types we discussed earlier in the last post are allocate in the stack and are poped out when they are out of the scope but for this example we need a type that allocates the memory inside the heap. Heap is the place where the program dynamically allocates the memory.</p>\n<p>If we compiled the code now using <code class=\"language-text\">cargo run</code> (we will learn about cargo in the next section) we will get the following error.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Linux$ cargo run\n   Compiling rust v0.1.0 <span class=\"token punctuation\">(</span>C:<span class=\"token punctuation\">\\</span>Rust<span class=\"token punctuation\">\\</span>rust<span class=\"token punctuation\">)</span>\nerror<span class=\"token punctuation\">[</span>E0382<span class=\"token punctuation\">]</span>: borrow of moved value: <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span>\n --<span class=\"token operator\">></span> src<span class=\"token punctuation\">\\</span>main.rs:6:24\n  <span class=\"token operator\">|</span>\n<span class=\"token number\">2</span> <span class=\"token operator\">|</span>     <span class=\"token builtin class-name\">let</span> name <span class=\"token operator\">=</span> String::from<span class=\"token punctuation\">(</span><span class=\"token string\">\"Rust\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">|</span>         ---- move occurs because <span class=\"token variable\"><span class=\"token variable\">`</span>name<span class=\"token variable\">`</span></span> has <span class=\"token builtin class-name\">type</span> <span class=\"token variable\"><span class=\"token variable\">`</span>String<span class=\"token variable\">`</span></span>, <span class=\"token function\">which</span> does not implement the <span class=\"token variable\"><span class=\"token variable\">`</span>Copy<span class=\"token variable\">`</span></span> trait\n<span class=\"token number\">3</span> <span class=\"token operator\">|</span>\n<span class=\"token number\">4</span> <span class=\"token operator\">|</span>     print_name<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">|</span>                ---- value moved here\n<span class=\"token number\">5</span> <span class=\"token operator\">|</span>\n<span class=\"token number\">6</span> <span class=\"token operator\">|</span>     println<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No. {}\"</span>, name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">|</span>                        ^^^^ value borrowed here after move</code></pre></div>\n<p>When we provided the <code class=\"language-text\">name</code> var with type <code class=\"language-text\">String</code> to <code class=\"language-text\">print_name</code> function it transferred the ownership of the var <code class=\"language-text\">name</code> to the function <code class=\"language-text\">print_name</code> and the var got out of the scope and since there is only one owner to each value the compiler throws an error saying that the <code class=\"language-text\">println!(name)</code> cannot access the var <code class=\"language-text\">name</code>.</p>\n<h3>Borrowing A Value</h3>\n<p>To deal with the ownership problem (which is not a problem but a feature), we can use another concept called Borrowing. It does what it says. This means that we borrow a value from a variable and when the value is used it is returned back to the owner.</p>\n<p>Now to change the code above we get the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">fn main() {\n    let name = String::from(&quot;Rust&quot;);\n\n    print_name(&amp;name);\n\n    println!(&quot;First: {}&quot;, name);\n}\n\nfn print_name(name: &amp;String) {\n    println!(&quot;Second: {}&quot;, name);\n}</code></pre></div>\n<p>The only thing that is changed now is that there is an ampersand in <code class=\"language-text\">print_name(&amp;name)</code> function call and in <code class=\"language-text\">print_name(name: &amp;String)</code> function creation. What this will do is borrow the value from the <code class=\"language-text\">name</code> and when the function <code class=\"language-text\">print_name</code> returns, it will also return the value to the owner <code class=\"language-text\">name</code> and now if we compile the code it will look like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Linux$ cargo run\n   Compiling rust v0.1.0 <span class=\"token punctuation\">(</span>C:<span class=\"token punctuation\">\\</span>Rust<span class=\"token punctuation\">\\</span>rust<span class=\"token punctuation\">)</span>\n    Finished dev <span class=\"token punctuation\">[</span>unoptimized + debuginfo<span class=\"token punctuation\">]</span> target<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.68s\n     Running <span class=\"token variable\"><span class=\"token variable\">`</span>target<span class=\"token punctuation\">\\</span>debug<span class=\"token punctuation\">\\</span>rust.exe<span class=\"token variable\">`</span></span>\nSecond: Rust\nFirst: Rust</code></pre></div>\n<p>I hope i made the concepts of Ownership and Borrowing a little easier to understand but still I highly recommend <a href=\"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html\">this page</a> on the official Rust website for you to read to better understand Ownership and Borrowing.</p>","frontmatter":{"title":"Day 118 - Ownership & Borrowing In Rust","date":"April 28, 2021","description":null,"tags":["Rust","Programming-Language"]}},"previous":{"fields":{"slug":"/day-117/"},"frontmatter":{"title":"Day 117 - Functions In Rust"}},"next":{"fields":{"slug":"/day-119/"},"frontmatter":{"title":"Day 119 - Cargo Build System In Rust"}}},"pageContext":{"id":"f1ed0d63-7146-5f3d-a023-cbaaef03c238","previousPostId":"77a84b2b-5b25-50a6-b518-9568e58ce4c1","nextPostId":"040dd718-1af8-50ff-a41b-0050815362c7"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}