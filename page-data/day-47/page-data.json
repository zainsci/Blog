{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-47/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"35d62b86-d4ea-5488-9ff9-b3e31e9e3de5","excerpt":"This post is all about Environemt Varibles in Linux as they are really important to learn and understand for a Linux User. Environment Variables Environment…","html":"<p>This post is all about Environemt Varibles in Linux as they are really important to learn and understand for a Linux User.</p>\n<h2>Environment Variables</h2>\n<p>Environment Variables are variables that are available to all programs in an evnironemnt. These variables define how the porcess should run depending on their value.</p>\n<p>Environment Variables are strings of key value pairs and are stored like this KEY=value or KEY=val1:val2. If there are more values to one KEY they are separated by a colon.</p>\n<p>These varibales are used to hide some values that you dont want anyone to have access to. For Example: It could be an API Key or an access token etc.</p>\n<h3>Viewing Environment Varibales in Linux</h3>\n<p>To view all the environment variables in Linux just type <code class=\"language-text\">env</code> in the command line.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:~$ <span class=\"token function\">env</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/user/local/bin\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token punctuation\">\\</span>u@<span class=\"token punctuation\">\\</span>h:<span class=\"token punctuation\">\\</span>w$\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>This command will display all the variables that are available to the environment. Here are shown only two vars, one is PATH and the other is PS1. These two are the only ones that I will talk about here.</p>\n<h3>PATH</h3>\n<p>PATH is an environment variables that points to the path for all the commands that you type in the shell such as ls or cd etc.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span>\n/usr/local/sbin:/usr/local/bin</code></pre></div>\n<p>These are directories that the bash will look in when you type a command and if the binary for the command is not found in PATH variables it will return command not found.</p>\n<h3>Change PATH Variable</h3>\n<p>If you install a new software or compile the binaries youself you won’t be able to use that in the terminal becasue the terminal looks for the binaries to run in the directories that are defined in the PATH variable.</p>\n<p>To edit a variable you do it like this <code class=\"language-text\">KEY=value</code> in the shell but to add the directory to PATH variable you have to do this the following way.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span>\n/usr/local/bin:/usr/local/sbin\nroot@User:~$ <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:/root/new-dir\nroot@User:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span>\n/usr/local/bin:/usr/local/sbin:/root/new-dir</code></pre></div>\n<p>The reason behid doing it this way is because if you edit the PATH by <code class=\"language-text\">KEY=value</code> method it will overwrite the PATH variable with only the value you provide and you might not be able to run commands like <code class=\"language-text\">ls</code> or <code class=\"language-text\">cd</code> etc.</p>\n<h3>PS1 Environment Variable</h3>\n<p>PS1 environment variable is a variable that defines how your prompt should look like. For example in the upper example it looks like this <code class=\"language-text\">root@User:~$</code> and that is becaue it is stored as a var like this <code class=\"language-text\">\\h@\\u:\\w$</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PS1</span>\n<span class=\"token string\">\"\\h@\\u:\\w$\"</span></code></pre></div>\n<p>And it can be changed the same way we did with PATH but a little different.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:~$ <span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"Linux>\"</span>\nLinux<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PS1</span>\n<span class=\"token string\">\"Linux>\"</span>\nLinux<span class=\"token operator\">></span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"\\u:\\w >>\"</span>\nUser:~ <span class=\"token operator\">>></span> <span class=\"token builtin class-name\">cd</span> tmp\nUser:/tmp <span class=\"token operator\">>></span></code></pre></div>\n<p>The PS1 variable have some placeholders that can be used to add system information into the prompt. Some of them are following.</p>\n<table>\n<thead>\n<tr>\n<th>Placeholder</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>\\u</strong></td>\n<td>For displaying User</td>\n</tr>\n<tr>\n<td><strong>\\w</strong></td>\n<td>For displaying Current Directory</td>\n</tr>\n<tr>\n<td><strong>\\h</strong></td>\n<td>For displaying Host</td>\n</tr>\n<tr>\n<td><strong>\\t</strong></td>\n<td>For displaying Time</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">User:/tmp <span class=\"token operator\">>></span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PS1</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"Linux:\\w >>\"</span>\nLinux:/tmp <span class=\"token operator\">>></span> <span class=\"token builtin class-name\">cd</span> temp\nLinux:/tmp/temp <span class=\"token operator\">>></span> <span class=\"token builtin class-name\">cd</span> ~\nLinux:~ <span class=\"token operator\">>></span> <span class=\"token builtin class-name\">pwd</span>\n/home/User</code></pre></div>\n<h3>Creating Your Own Environment Variables</h3>\n<p>To create your own variables you can do so by the same way you edit a variable. When editing a variable in the terminal if it already exists it will be overwritten but if it does not a new one will be created.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Linux:~ <span class=\"token operator\">>></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$NEWVAR</span>\n\nLinux:~ <span class=\"token operator\">>></span> <span class=\"token assign-left variable\">NEWVAR</span><span class=\"token operator\">=</span><span class=\"token string\">\"This is a new Variable!\"</span>\nLinux:~ <span class=\"token operator\">>></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$NEWVAR</span>\n<span class=\"token string\">\"This is a new Variable!\"</span></code></pre></div>","frontmatter":{"title":"Day 46 - Environment Variables In Linux","date":"February 16, 2021","description":null}},"previous":{"fields":{"slug":"/day-46/"},"frontmatter":{"title":"Day 46 - Scheduling Tasks In Linux"}},"next":null},"pageContext":{"id":"35d62b86-d4ea-5488-9ff9-b3e31e9e3de5","previousPostId":"81be7de4-3161-5c7d-a5b7-1a374a08a92e","nextPostId":null}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}