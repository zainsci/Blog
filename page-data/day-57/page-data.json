{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-57/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"1da141fb-cfab-5632-b54e-35b8ad81e891","excerpt":"I recently watched many videos and read one or two articles to understand how to calculate the time complexity of an algorithm but I don’t know why this thing…","html":"<p>I recently watched many videos and read one or two articles to understand how to calculate the time complexity of an algorithm but I don’t know why this thing is not getting into my head. But I will learn this today by any way possible so here I go.</p>\n<h2>What is Time Complexity?</h2>\n<p>First I should know what is time complexity of an algorithm which I think I have already written two time before on other posts but here I will explain it again.</p>\n<p>Time Complexity of an algorithm is the estimation of time an algorithm will take to solve a problem when provided with a large input. It is calculated to know how well an algorithm in terms of time will perform when given a large data set as an input to solve some problem.</p>\n<p>Time complexity if calculated by caluculating the number of steps the algorithm will take times the time it takes one step to complete. For example a simple <strong>for loop</strong> that run for n times and prints n times will have the time complexity of O(n). O(n) will be large if the input data set is large and thus will take more time to complete.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2 3 4 5 6 . . . n</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That was simple enough to know but how do we calculate the time complexity of other more complex algorithms?</p>\n<h2>Calculating The Time Complexity</h2>\n<p>As I wrote above that the steps that an algorithm will take to solve a problem are calculated in order to know its time complexity. I will now try to calculate the time complexities of some simple tasks like loops etc by calculating the steps of the task.</p>\n<h4>Example 0 - Simple For Loop</h4>\n<p>As an example above I mentioned that a simple loop will have a time complexity of O(n) as the loop will run n times as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Will print n times</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Technically the loop will run n+1 times but it is the same as n for large numbers like a thousand or a million.</p>\n<h4>Example 1 - Nested Loops</h4>\n<p>Now let’s calculate the time complexity of the following code which is a loop inside a loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Outer loop runs for n times</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Inner loop runs for n times</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Outer: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, Inner: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As both the inner and outer loop runs <code class=\"language-text\">n</code> times we will say that this process will take n time n steps to complete so it has the time complexity of O(n*n) or O(n^2).</p>\n<h4>Example 2 - Merge Sort</h4>\n<p>Now I will try to calculate the time complexity of some more complex algorithm than the previous ones and that is Merge Sort. But first we have to know how merge sort works and that I have explained in <a href=\"/blog/day-54/\">Day 54</a>.</p>\n<p>Merge Sort have two functions, one is merge and the other is MergeSort itself.</p>\n<p>Merge function will take <code class=\"language-text\">N</code> steps to process because it is looping through each list to merge them. So its function is <code class=\"language-text\">O(N)</code>.</p>\n<p>MergeSort function will take <code class=\"language-text\">LogN</code> steps to return the result becasue on every step it is furthur dividing the lists recusively. So its function becomes <code class=\"language-text\">O(LogN)</code> Combining them both we get the time complexity of MergeSort which is <code class=\"language-text\">O(NLogN)</code>.</p>\n<p>I am sure i have missed some things in the process and still cannot calculate for more comlex algorithms but I think that is enough for today.</p>","frontmatter":{"title":"Day 57 - Calculating Time Complexity Of An Algorithm","date":"February 26, 2021","description":null,"tags":["Data-Structures","Algorithms"]}},"previous":{"fields":{"slug":"/day-56/"},"frontmatter":{"title":"Day 56 - The Analysis of Algorithms"}},"next":{"fields":{"slug":"/day-58/"},"frontmatter":{"title":"Day 58 - Binary Search Algorithm"}}},"pageContext":{"id":"1da141fb-cfab-5632-b54e-35b8ad81e891","previousPostId":"3a984ffd-4ef1-5e34-95ef-ee96e0ff2a08","nextPostId":"44b0f7a6-b498-5d6e-a2e4-1dff4a21686c"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}