{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-58/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"44b0f7a6-b498-5d6e-a2e4-1dff4a21686c","excerpt":"Today was a bit busy day but I did learn an algorithm. This algorithm is called Binary Search which is a searching algorithm that recursively searches for aâ€¦","html":"<p>Today was a bit busy day but I did learn an algorithm. This algorithm is called Binary Search which is a searching algorithm that recursively searches for a given element in a list.</p>\n<h2>Binary Search</h2>\n<p>Binary Search or also called Lograthimic search is a searching algorithm that find the given element in a sorted array. This list much be sorted for Binary search to work correctly. Binary Search is recursive alogorithm. But how it works?</p>\n<h3>How Binary Search Works?</h3>\n<p>Binary search takes two inputs, a sorted list and the element to look for in the list. Let this number be <code class=\"language-text\">X</code>. The algorithm will first compare the middle element from the list with <code class=\"language-text\">X</code>. If you are lucky and the middle element is the one you are looking for, the loop will end and the function will return <code class=\"language-text\">X</code> but that is not always the case and so the algorithm will check if the number is bigger or smaller than <code class=\"language-text\">X</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\nX <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\nquick_sort<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If the middle element is smaller than <code class=\"language-text\">X</code> the algorith will look in the left half of the list and if the <code class=\"language-text\">X</code> is bigger then it will look for in the right half of the list and goes on recursively until it finds the element.</p>\n<h3>Implementation</h3>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    low <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    high <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    mid <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">while</span> low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">:</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">+</span> low<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        <span class=\"token comment\"># calculate mid point of the list</span>\n\n        <span class=\"token keyword\">if</span> list1<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">:</span>\n            low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">elif</span> list1<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> num<span class=\"token punctuation\">:</span>\n            high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mid\n\n    <span class=\"token keyword\">return</span>\n\n\nlist1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\nnum <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\nresult <span class=\"token operator\">=</span> binary_search<span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> result<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"At index: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>result<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Num not in list\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This will print out the result <code class=\"language-text\">At index: 1</code> because the number <code class=\"language-text\">2</code> is at position 1 starting from 0.</p>","frontmatter":{"title":"Day 58","date":"February 27, 2021","description":null,"tags":["Data-Structures","Algorithms"]}},"previous":{"fields":{"slug":"/day-57/"},"frontmatter":{"title":"Day 57 - Calculating Time Complexity Of An Algorithm"}},"next":null},"pageContext":{"id":"44b0f7a6-b498-5d6e-a2e4-1dff4a21686c","previousPostId":"1da141fb-cfab-5632-b54e-35b8ad81e891","nextPostId":null}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}