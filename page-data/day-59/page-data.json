{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-59/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"a0705a00-7964-5f05-9fc4-4ecce6fae037","excerpt":"Last day’s algorithm which was a searching algorithm was much simpler to understand than the sorting algorithms I learned some days before and today I learned…","html":"<p>Last day’s algorithm which was a searching algorithm was much simpler to understand than the sorting algorithms I learned some days before and today I learned another simple algorithm which is also a searching algorithm. This algorithm is called Jump Search.</p>\n<h2>Jump Search Algorithm</h2>\n<p>Jump Search algorithm is a simple searching algorithm. Just like Binary Search it takes a sorted list as the input with the number element to look for. It searches through the list by jumping of a set number of elements from the list. It is a fairly simple algorithm to understand as well as to implement it.</p>\n<h3>How Jump Search Works?</h3>\n<p>Jump Search takes a sorted array as input with the element to look for. Let this element be <code class=\"language-text\">x</code>. Then it loops through the sorted array and jumps <code class=\"language-text\">n</code> elements until it finds the element that is bigger than <code class=\"language-text\">x</code> and also remembers the last element it jumped. After finding the element that is bigger than <code class=\"language-text\">x</code> it will perform a liner search between the last jumped element and the bigger element.</p>\n<p>Linear search is also a searching algorithm which loops throuhg the whole list a checks every element until it find the one it was looking for. For worst case scenario Linear search takes <code class=\"language-text\">O(n)</code> time and in best case O(1) or contast time.</p>\n<h3>Implementation</h3>\n<p>The implementation below is done in Python.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">import</span> math\n\n\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\nX <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">jump_search</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  jmp <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>floor<span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  jmp_prev <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">while</span> arr<span class=\"token punctuation\">[</span>jmp<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">:</span>\n    jpm_prev <span class=\"token operator\">=</span> jmp\n    jmp <span class=\"token operator\">+=</span> jmp\n\n    <span class=\"token keyword\">if</span> jmp_prev <span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span>\n\n  <span class=\"token keyword\">while</span> arr<span class=\"token punctuation\">[</span>jmp_prev<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">:</span>\n    jmp_prev <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">if</span> jmp_prev <span class=\"token operator\">==</span> jmp<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span>\n\n  <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>jmp_prev<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> jmp_prev\n\n  <span class=\"token keyword\">return</span>\n\nres <span class=\"token operator\">=</span> jump_search<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> res<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"At Index: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>res<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Num Not In List\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Time Comlpexity</h3>\n<p>The Time Complexity for Jump Search is <code class=\"language-text\">O(√n)</code> which is faster than Linear Searhc but Slower than the Binary search.</p>","frontmatter":{"title":"Day 59 - Jump Search Algorithm","date":"February 28, 2021","description":null,"tags":["Data-Structures","Algorithms"]}},"previous":{"fields":{"slug":"/day-58/"},"frontmatter":{"title":"Day 58 - Binary Search Algorithm"}},"next":{"fields":{"slug":"/day-60/"},"frontmatter":{"title":"Day 60 - Some More Algorithms To Learn"}}},"pageContext":{"id":"a0705a00-7964-5f05-9fc4-4ecce6fae037","previousPostId":"9e193ddb-97ee-5fdf-8ad2-07e38eaea58a","nextPostId":"48749fd6-4aff-560d-9d9f-8db909839821"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}