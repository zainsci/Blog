{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-52/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"9e5dd002-1180-54ee-a295-a66ab8d448fa","excerpt":"Algorithms are steps to solve a problem and there are many algorithms to solve just one problem but all of them follow different steps. All these algorithmsâ€¦","html":"<p>Algorithms are steps to solve a problem and there are many algorithms to solve just one problem but all of them follow different steps. All these algorithms have pros and cons and all these algorithms take different time to solve the same problem.</p>\n<p>When solving a problem we always look for the most efficient way to solve that problem and for that we need to find the time complexity and the steps it will take an algorithm to solve the problem more efficiently. For this analysis of algorithms we use a notation called The Big O Notation.</p>\n<h2>The Big O Notation</h2>\n<p>The Big O Notation is used to find the complexity of an algorithm. It is a way to know how well an algorithm will perform when provided with a certain input. It helps programmers know about the time and space complexity of an algorithm.</p>\n<p>For example the Big O notation of Insertion Sort in Best Case performance is <strong>O(n)</strong> or of Linear Complexity. Linear Complexity means that the steps it will take for an algorithm to complete its execution will increase or decrease with the size of input.</p>\n<p>Other common Big O Notations are following.</p>\n<ul>\n<li><strong>O(c)</strong></li>\n<li><strong>O(n)</strong></li>\n<li><strong>O(n^2)</strong></li>\n<li><strong>O(Log(n))</strong></li>\n<li><strong>O(nLog(n))</strong></li>\n</ul>\n<p>These notations are used to describe the time complexity of an algorithm in three cases. In:</p>\n<ul>\n<li><strong>Best Case</strong></li>\n<li><strong>Worst Case</strong></li>\n<li><strong>Average Case</strong></li>\n</ul>\n<h3>Big O Notation Of Insertion Sort</h3>\n<p>Insertion Sort is a simple sorting algorithm. It sorts a list of elements by sorting one element at a time. The Big O notation for insertion sort in different cases is following.</p>\n<ul>\n<li>Best Case Performance: <strong>O(n)</strong></li>\n<li>Worst Case Performance: <strong>O(n^2)</strong></li>\n<li>Average Case Performance: <strong>O(n^2)</strong></li>\n</ul>\n<p>In <strong>Best Case Performance</strong>, Big O of the insertion sort is O(n). This means the steps to complete the execution of an algorithm will increase or decrease depending on the size of the input provided. Bigger the input more time and steps it will take to get the output and vice versa.</p>\n<p>In <strong>Worst Case Performance</strong>, Big O of insertion sort is O(n^2). This means that the steps it will take for the algorithm to complete its execution will be square to the size of the input. Bigger the size of input, more steps to complete its execution.\nAnd same goes for <strong>Average Case Performance</strong>.</p>","frontmatter":{"title":"Day 52 - The Big O Notation","date":"February 21, 2021","description":null}},"previous":{"fields":{"slug":"/day-51/"},"frontmatter":{"title":"Day 51 - Data Structures And Algorithms"}},"next":{"fields":{"slug":"/day-53/"},"frontmatter":{"title":"Day 53 - Insertion Sort"}}},"pageContext":{"id":"9e5dd002-1180-54ee-a295-a66ab8d448fa","previousPostId":"88081130-9954-5a60-95fc-2759caf7344a","nextPostId":"7018fac0-6d51-5dfe-be43-0f00793f88d6"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}