{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-117/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"77a84b2b-5b25-50a6-b518-9568e58ce4c1","excerpt":"Last time we looked at Variables, Comments and some of the Types in Rust and now its time for funtions in Rust. A function is a piece of code that peforms aâ€¦","html":"<p>Last time we looked at Variables, Comments and some of the Types in Rust and now its time for funtions in Rust. A function is a piece of code that peforms a task. It can be reused as many times as you want. You can provide some data to it and it can return some data to you.</p>\n<h2>Functions In Rust</h2>\n<p>To define a function in Rust, we use <code class=\"language-text\">fn</code> keyword followed by the function name and paranthesis <code class=\"language-text\">()</code> and then curly braces <code class=\"language-text\">{}</code> after that. These <code class=\"language-text\">{}</code> hold your function code that executes when your function is called.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">fn print_a_line() {\n    println!(&quot;This is a String!&quot;);\n}</code></pre></div>\n<h3>Function Parameters</h3>\n<p>We can provide the function with parameters in the parathesis. We have to tell the compiler outself what the pratmeter type will be. First we write the parameter name and then after that a colon <code class=\"language-text\">:</code> and then we specify a type for the parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">fn print_a_line(line: &amp;str) {\n    println!()\n}</code></pre></div>\n<h3>Function Return Type</h3>\n<p>We can also tell the compiler in advance what type of value does the function return will be. We can do so by adding an arrow <code class=\"language-text\">-&gt;</code> after the paranthesis and then specifying the type.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">fn add(a: i32, b: i32) -&gt; i32 {\n  a + b\n}</code></pre></div>\n<p>Here you see we have a function with two parameters both of which are 32-bit integers and the return type for the function is also a 32-bit integer. Down there we then add two numbers.</p>\n<p>But in the above code you may some thing that is may be new to you (it is for me) and that is that we are not using any return keyword here. Functions in Rust will by default return the value of the last line in the function which does not have a semi-colon in the end.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">fn add(a: i32, b: i32) -&gt; i32 {\n  return a + b;\n}\n\n// This function is the same as the above\nfn add(a: i32, b: i32) -&gt; i32 {\n  a + b\n}</code></pre></div>\n<p>But if you add <code class=\"language-text\">return</code> keyword before something you also have to add a semi-colon at the end too.</p>\n<p>That it for the functions of Rust and next we will be covering Loops and Conditionals in Rust and after that we will be taking a look at Owndership which is a new concept to me and is also a unique feature in Rust Programming Language. See you all next time.</p>","frontmatter":{"title":"Day 117 - Functions In Rust","date":"April 27, 2021","description":null,"tags":["Rust","Programming-Language"]}},"previous":{"fields":{"slug":"/day-116/"},"frontmatter":{"title":"Day 116 - Comments, Variables & Types In Rust"}},"next":null},"pageContext":{"id":"77a84b2b-5b25-50a6-b518-9568e58ce4c1","previousPostId":"c4222fa4-1e05-5f01-8815-c6b8cfedd091","nextPostId":null}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}