{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-36/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"24b4275f-c345-5cc8-9488-de48bf57be87","excerpt":"This is the seventh post in the Linux Series and this will be all about searching and locating files and some other concepts and commands that are useful to a…","html":"<p>This is the seventh post in the Linux Series and this will be all about searching and locating files and some other concepts and commands that are useful to a programmer. First for somemore shortcuts and tricks to make using command line easier.</p>\n<h3>Autocompleting with tab</h3>\n<p>When typig some command and using a file in it or changing a directory etc you have to type the name of the file or name of the directory and sometimes the name is too long to hard to write so you can press tab and it will autocomplete the name for you only if the file exists in the current working directory.</p>\n<p>For example you want to change the directory to tmp from the <code class=\"language-text\">/</code> directory, you type t and press tab and it will autocomplete the name depending on how many dirs or files are there in the cwd that have the name that starts with the letter t. If the first suggestion is not tmp them pressing tab again will show the next suggestion and you can press it again and again to reach the suggestion you want, which is tmp dir.</p>\n<p>Now to commands.</p>\n<h2>Search</h2>\n<p>There are many ways to look for a file in the filesystem using the terminal but here I will write about only two of them, <code class=\"language-text\">find</code> and <code class=\"language-text\">locate</code>.</p>\n<h3>Searching with <strong>find</strong></h3>\n<p>The <strong>find</strong> command is the most powerful searching command that can look for files and folders with their name as well with their size, owner, date of modification, and group etc. It works like following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:/$ <span class=\"token function\">find</span> / -type f -name <span class=\"token builtin class-name\">cd</span></code></pre></div>\n<p>First type the command name <code class=\"language-text\">find</code> them as the first argument to it type the directory to lookup in which in this case is the root or uppermost <code class=\"language-text\">/</code>, then type <code class=\"language-text\">-type</code> flag and after that specify the type and after that <code class=\"language-text\">-name</code> flag with the name of the file to lookup for.</p>\n<p>Example: I create a file named <code class=\"language-text\">file.txt</code> in the /tmp directory and a new directory named fold with filename file.txt in it. I ran the find command and it printed the path to the files.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:/$ <span class=\"token function\">find</span> /tmp/ -type f -name file.txt\n/tmp/file.txt\n/tmp/fold/file.txt</code></pre></div>\n<h3>Searching with <strong>locate</strong></h3>\n<p><code class=\"language-text\">locate</code> command works simillarly as the <code class=\"language-text\">find</code> command. It is also used to locate files in the filesystem. It is easier to work with than the <code class=\"language-text\">find</code> command. To use it just type the command keyword and type the name of the file to look for.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:/$ <span class=\"token function\">locate</span> file.txt</code></pre></div>\n<p>How it works is it uses the name provided as the argument and look in the filesystem for the files that contain that word. But this command is not perfect because it may not work for files that are created some minutes or hours ago.</p>\n<p>and now to grep command.</p>\n<h2>Filtering input with grep</h2>\n<p><code class=\"language-text\">grep</code> is one of the most useful commands to work with in Linux. grep stand for Global Regular Expression Printer or in somple words from Wikipedia “globally search for a regular expression and print matching lines”. It was originally developed by Ken Thompson (co-creater of UNIX OS).</p>\n<p>grep searches for provided keywords in the files or sets of strings and prints out the result. For example: consider a file containing titles of the all the moveis that released in 2020 which are not alot of movies and you provide a keyword “the” to search for and it will print all the movie titles that include the word “the” in it.</p>\n<h3>searching for a string within a file</h3>\n<p>Create a file named <code class=\"language-text\">domains</code> in the /tmp directory and type grep with <code class=\"language-text\">.com</code> as the first argument and filename <code class=\"language-text\">domains</code> as the second argument to grep and press enter.</p>\n<p>To the terminal and doing some work.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:/tmp$ <span class=\"token function\">ls</span>\ndomains\nroot@User:/tmp$ <span class=\"token function\">cat</span> domains\nwikipedia.com\ngoogle.com\nwikimedia.org\ngithub.com\nzainsci.github.io/blog\nanother-site.com\nfake-site.com.something\nblah blah\nanother.blah\nnewfile.txt\nsome.com.au.aus.australia\nroot@User:/tmp$ <span class=\"token function\">grep</span> .com domains\nwikipedia.com\ngoogle.com\ngithub.com\nanother-site.com\nfake-site.com.something\nsome.com.au.aus.australia\nroot@User:/tmp$ <span class=\"token function\">grep</span> .io domains\nzainsci.github.io/blog</code></pre></div>\n<p><code class=\"language-text\">grep</code> can also be used directly with input as the output from another command. The following command is for demonstration only. <code class=\"language-text\">cat</code> should not be used to provide input for the <code class=\"language-text\">grep</code> as grep can use the file by itself as the input. Using just for an example.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">root@User:/tmp$ <span class=\"token function\">cat</span> domains <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> .io\nzainsci.github.io/blog</code></pre></div>\n<p>The <code class=\"language-text\">|</code> character is called a pipe and pipes the output of one command as the input of other command. In the upper command the output of cat command is piped as the input of grep command. <code class=\"language-text\">grep</code> can do many more than this and needs more reading to better understand it as it can be very useful when working with Linux Command Line.</p>","frontmatter":{"title":"Day 36 - Finding and Filtering in Linux","date":"February 05, 2021","description":null}},"previous":{"fields":{"slug":"/day-35/"},"frontmatter":{"title":"Day 35 - File Management In Command-Line"}},"next":{"fields":{"slug":"/day-37/"},"frontmatter":{"title":"Day 37 - Users and Groups in Linux"}}},"pageContext":{"id":"24b4275f-c345-5cc8-9488-de48bf57be87","previousPostId":"36367b4e-bcb0-50b2-8734-089dd8d728a2","nextPostId":"f45d9816-6dba-59b4-be3f-045d40481966"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}