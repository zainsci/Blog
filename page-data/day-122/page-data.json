{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-122/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"b9ca297d-e90c-5d8c-b375-4a60aaf97922","excerpt":"A struct or structure is a custom Data Type that is a collection of related values that are put together to form a meaningful group. They are simillar to Objectâ€¦","html":"<p>A struct or structure is a custom Data Type that is a collection of related values that are put together to form a meaningful group. They are simillar to Object attributes as in Object Oriented Languages. Structs in Rust are simillar to how we define them in C and C++ but structs in Rust can do more than structs in C and C++.</p>\n<h3>Structs</h3>\n<p>To define a struct in Rust we use the struct keyword followed by the name of the struct and then <code class=\"language-text\">{}</code> and inside these we put the values that are related to the struct.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">struct SuperHero {\n    name: String,\n    hero_name: String,\n    age: u32,\n    active: bool,\n}</code></pre></div>\n<p>To use the struct we define a variable to which we will assign the struct with the name and age value inside the <code class=\"language-text\">{}</code> which we can later use in other places.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">let bruce = SuperHero {\n    name: String::from(&quot;Bruce&quot;),\n    hero_name: String::from(&quot;Batman&quot;),\n    age: 30,\n    active: true,\n};</code></pre></div>\n<p>We can use the dot notation to reference a property of the struct and can also use the dot notation to update the property of the Person.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">bruce.name // Bruce\nbruce.name = String::from(&quot;Bruce Wayne&quot;);\nbruce.name // Bruce Wayne</code></pre></div>\n<p>But to allow the values of a struct to be updates later, the instance must be mutable.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">let mut bruce = SuperHero {\n    // ...\n};</code></pre></div>\n<h3>Creating Instaces With Values From Other Instances</h3>\n<p>We can also create instances from other inctances with sharing the values of other instances as well. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">let mut clark = SuperHero {\n    name: String::from(&quot;Clark Kent&quot;),\n    hero_name: String::from(&quot;SuperMan&quot;),\n    ..bruce\n};</code></pre></div>\n<p>Now clark will inherit the same values as the bruce except the ones we defined ourselves like <code class=\"language-text\">name</code> and <code class=\"language-text\">hero_name</code>. This show that <code class=\"language-text\">clark</code> is the same age as <code class=\"language-text\">bruce</code> and is also active.</p>\n<h3>Struct Methods</h3>\n<p>As said before that Rust structs are much more than the C and C++ becuase we can implement methods on the struct that we can call on the strcut to modify some value inside the instance of the struct. We implement a method by using <code class=\"language-text\">impl</code> keyword and after that the name of the struct on which we want to implement it and then inside the <code class=\"language-text\">{}</code> we define a new function with <code class=\"language-text\">&amp;self</code> as the first argument which represents the instance itself just like the keyword <code class=\"language-text\">self</code> in Python and <code class=\"language-text\">this</code> in JavaScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">impl Hero {\n    fn say_my_name(&amp;self) {\n        println!(&quot;{}&quot;, slef.name)\n    }\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">bruce.say_my_name() // Bruce Wayne</code></pre></div>\n<h3>Tuple Struct</h3>\n<p>Rust also have Tuple Struct which we define the same way but without any name and <code class=\"language-text\">{}</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">struct RGB(i32, i32, i32);\n\nlet black = RGB(0, 0, 0);</code></pre></div>\n<p>We can reference a value of the tuple struct by using its index number with dor notation.</p>\n<div class=\"gatsby-highlight\" data-language=\"rs\"><pre class=\"language-rs\"><code class=\"language-rs\">black.0 // 0\nblack.1 // 0\nblack.2 // 0</code></pre></div>\n<p>And that all for Struct. This one was a little simple for me to understand as I have worked with struct before in C while learning about Linked Lists and Hash Tables but still Rust struct are more powerful than they are in C and maybe some other languages.</p>","frontmatter":{"title":"Day 122 - Structs And Traits In Rust","date":"May 02, 2021","description":null,"tags":["Rust","Programming-Language"]}},"previous":{"fields":{"slug":"/day-121/"},"frontmatter":{"title":"Day 121 Enums In Rust"}},"next":null},"pageContext":{"id":"b9ca297d-e90c-5d8c-b375-4a60aaf97922","previousPostId":"ba58b20d-a5a0-5e41-88f8-7f28f3ba437d","nextPostId":null}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}