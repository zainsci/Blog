{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-68/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"ce4a27d4-2570-5805-885a-38fd15abbaba","excerpt":"If you have used more than one operating system you know that all of the have different file types for the executables like if you want to install a software on…","html":"<p>If you have used more than one operating system you know that all of the have different file types for the executables like if you want to install a software on Windows you have to install it using a <code class=\"language-text\">.exe</code> file or using a <code class=\"language-text\">.msi</code> file type and in Linux if you use Debian based Linux distro you see a <code class=\"language-text\">.deb</code> filetype for installing a new software. But why is that they both have different filetypes for the same function? That is what I will be finding out today.</p>\n<h2>Why Applications Are Operating System Specific?</h2>\n<p>Most of the apps that you use on one OS cannot be used with the same filetype on some other OS because of the OS System Calls. System calls are services provided by the OS for use by the programs and they all are implemented in different way maybe because of the OS structure, design or just because someone wanted to. But even if the system calls are implemented the same way there are other things that does not let one program to run on some other OS.</p>\n<p>Other reasons why apps are OS specific are following.</p>\n<ul>\n<li>All OS have different APIs (Application Programming Interface) for interacting with OS binaries but not all OS have same kind of APIs.</li>\n<li>Having different CPU instructions sets where only applications who can execute those instructions can work.</li>\n<li>Each OS follows a binary format for all the executeable files so it can access them and execute them when it wants to.</li>\n<li>Also because of CPU Architecture.</li>\n</ul>\n<p>All these tells us why we cannot use a program in one OS on another OS but there are ways to execute programs on all OS. There are three ways to do that.</p>\n<ol>\n<li>A progam can be executed on all OS by writing the program in an Interpreted Language like Python etc and then using the language’s interpreter on the OS where you want to run the program to interept the instructions according to the OS and accessing system calls of that OS and execute the program.</li>\n<li>Another way of achieving this by writing the program in a language which uses a virtual machine containing the running program. Java uses this method and any Java program can run on any OS as long as the OS supports Java RTE. What Java does is that it converts the source code into Java bite-code which the Java Virtual Machine uses to execute the program.</li>\n<li>Another way is to write the progam in a standard language where it builds the source code into machine and operating system specific binaries. But you have to build the binaries for all the popular OS and of all the verisons and had to do many tests and on all OS for this approach.</li>\n</ol>\n<p>All the above mentioned ways can be used to buld cross-platform applications but they may lack in speed and performance comparing to the natively built programs.</p>","frontmatter":{"title":"Day 68 - Why Applications are Os Specific","date":"March 09, 2021","description":null,"tags":["Opearting-Systems"]}},"previous":{"fields":{"slug":"/day-67/"},"frontmatter":{"title":"Day 67 - Operating System Structures"}},"next":null},"pageContext":{"id":"ce4a27d4-2570-5805-885a-38fd15abbaba","previousPostId":"46a69afd-5dab-5c63-bd92-c2047038095e","nextPostId":null}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}