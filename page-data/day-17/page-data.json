{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-17/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"b54354bc-fc68-5914-957f-e88b21894fd7","excerpt":"I wrote about one of the most widely used WebAttacks in the last post which was XSS or Cross-Site Scripting which is a technique used by programmers both good…","html":"<p>I wrote about one of the most widely used WebAttacks in the last post which was XSS or Cross-Site Scripting which is a technique used by programmers both good and bad to inject JS code into clientside of the site to access user data like password, cookies, and bank accounts etc.</p>\n<p>Today I am going to talk about another of the most well-known and widely used web-attack technique called SQL-Injection. SQL-Injection is a malicious technique meant to edit or delete databases. Just like XSS it is also carried out through user input fileds and can cause massive damage if you are running some online business or an online banking service.</p>\n<p>The Best way to handle SQL-Injection is to sanitize user data which is directly involving in the query used to fetch data from the database.</p>\n<p>As an example here is a url for your website where you fetch data from the database by using the parameter “id” from the url and directly adding it to the query string.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># yourwebsite.com/user?id=1</span>\n\nuser_id <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token comment\"># id = 1 in this case</span>\n\n<span class=\"token comment\"># Directly adding user input without sanitizing it</span>\nsql_query <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"SELECT * FROM users WHERE id = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>user_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">;\"</span></span>\n\n<span class=\"token comment\"># Returns User Data where id = 1</span></code></pre></div>\n<p>But someone who understands SQL can take advantage of it by altering the url.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token comment\"># yourwebsite.com/user?id=1 OR 1=1</span>\n\nuser_id <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token comment\"># where id = \"1 OR i=1\"</span>\nsql_query <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"SELECT * FROM users WHERE id = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>user_id<span class=\"token punctuation\">}</span></span><span class=\"token string\">;\"</span></span>\n\n<span class=\"token comment\"># Returns User Data where id = 1 OR 1=1</span></code></pre></div>\n<p>The database in this case will return all the users data whcih is stored in the database as the condition 1=1 holds true.</p>\n<p>The Conclusion Always Sanitaize UserData before enterting it into the query.</p>\n<h2>What I Learned Today</h2>\n<h3>💻 Programming</h3>\n<ul>\n<li>\n<p>SQL-Injection - As my site is a static-site it doesn’t have any backend database and as I mentioned in the last post it doesn’t even have any input field or form in it too so no worries for now. Also some sources to study more on this topic.</p>\n<ol>\n<li>Hacking Websites with SQL Injection - <a href=\"https://youtu.be/_jKylhJtPmI\">Link</a></li>\n<li>Running an SQL Injection Attack - <a href=\"https://youtu.be/ciNHn38EyRc\">Link</a></li>\n<li>Sql Injection Explained by Example with Express and PostgreSQL - <a href=\"https://youtu.be/ciNHn38EyRc\">Link</a></li>\n<li>What is SQL injection (SQi)? - <a href=\"https://www.cloudflare.com/learning/security/threats/sql-injection/\">Link</a></li>\n<li>SQL Injection Explained with Syntax Examples - <a href=\"https://www.freecodecamp.org/news/sql-injection-explained-with-syntax-examples/\">Link</a></li>\n</ol>\n</li>\n</ul>\n<h3>🗾 Langauge[<span lang=\"ja\">日本語</span>]</h3>\n<ul>\n<li><span lang=\"ja\"><strong>客室</strong> (きゃくしつ)</span> Guest Room. <span lang=\"ja\">客</span>: Guest, <span lang=\"ja\">室</span>: Room.</li>\n<li><span lang=\"ja\"><strong>高さ</strong> (たかさ)</span> Height. <span lang=\"ja\">高</span>: Tall or Expensive.</li>\n<li><span lang=\"ja\"><strong>平和</strong> (へいわ)</span> Peace. <span lang=\"ja\">平</span>: Flat, <span lang=\"ja\">和</span>: Peace.</li>\n<li><span lang=\"ja\"><strong>受験</strong> (じゅけん)</span>Taking an Exam. <span lang=\"ja\">受</span>: Accept, <span lang=\"ja\">験</span>: Confirmation.</li>\n</ul>","frontmatter":{"title":"Day 17 - Sunday, January 17, 2021","date":"January 17, 2021","description":null,"tags":["Security","Web-Attacks","SQL-Injection"]}},"previous":{"fields":{"slug":"/day-16/"},"frontmatter":{"title":"Day 16 - Saturday, January 16, 2021"}},"next":{"fields":{"slug":"/day-18/"},"frontmatter":{"title":"Day 18 - Monday, January 18, 2021"}}},"pageContext":{"id":"b54354bc-fc68-5914-957f-e88b21894fd7","previousPostId":"c307c22b-894c-5a25-a06e-200ebac6418a","nextPostId":"38ec2356-cc21-54ae-96fa-e8ad3c6cddc5"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}