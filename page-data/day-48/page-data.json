{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-48/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"f33e2ca3-1980-5fc9-888c-fb6046e3f3e5","excerpt":"A Shell is a command interpreter or an interface between a computer’s OS and the user that enables the user to manipulate files and run commands, programs etc…","html":"<p>A Shell is a command interpreter or an interface between a computer’s OS and the user that enables the user to manipulate files and run commands, programs etc.</p>\n<p>There are many shells available for Linux like Zsh or Z-Shell and C Shell but here we are only going to talk about BASH or Bourne-Again Shell because BASH is very widely used and comes pre-installed in most of the Linux Distros and also in MAC-OS and other UNIX like OS.</p>\n<h2>BASH Scripting</h2>\n<p>Scripting allows us to run multiple commands automatically at a time that if done by a human would have to type one after another. BASH Scripting a script written to be executed by the BASH.</p>\n<p>To write a script we need a Text-Editor and for that I will be using VI because it comes pre-installed with Linux.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Linux<span class=\"token operator\">></span> <span class=\"token function\">touch</span> newscript\nLinux<span class=\"token operator\">></span> <span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> newscript\n<span class=\"token comment\">#! /bin/bash</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is a simple bash script\"</span></code></pre></div>\n<p>This script written above has two lines in it, the first one start with <code class=\"language-text\">#</code> and <code class=\"language-text\">!</code> which is called a <strong>shebang</strong> and after that we define what shell should run this script which is <code class=\"language-text\">/bin/bash</code></p>\n<p>The second one is an actual command that we use in the shell. We learned about some commands in <a href=\"/blog/day-34/\">Day-34</a> and <a href=\"/blog/day-41/\">Day-41</a>.</p>\n<p>Any newly created script file is not executeable by default so you have to add execute permission to the file that we talked about in <a href=\"/blog/day-39/\">Day-39</a>. After adding permission to we can run it in the shell.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Linux<span class=\"token operator\">></span> ./newscript\nThis is a simple <span class=\"token function\">bash</span> script</code></pre></div>\n<h3>Variables and Input In BASH Script</h3>\n<p>You can use vaiables and ask for input from the user to add more functionality in your BASH scripts.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Linux<span class=\"token operator\">></span> <span class=\"token function\">touch</span> secscript.sh\nLinux<span class=\"token operator\">></span> <span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> secscript.sh\n<span class=\"token comment\">#! /bin/bash</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"What's your name?\"</span>\n<span class=\"token builtin class-name\">read</span> name\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello There, \"</span> <span class=\"token variable\">$name</span></code></pre></div>\n<p>Here a new keyword is used which is <code class=\"language-text\">read</code> which is used to read the the text that you input in the shell before you hit enter and the <code class=\"language-text\">name</code> after the <code class=\"language-text\">read</code> is a varibale that stores the string that you type in the shell. Now after adding permissions to it I will run the script.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Linux<span class=\"token operator\">></span> ./secscript.sh\nWhat's your name?\nLinus\nHello There, Linus</code></pre></div>\n<h3>Example Script</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">!</span><span class=\"token comment\"># /bin/bash</span>\nnmap -sT <span class=\"token number\">192.168</span>.10.0/24 <span class=\"token operator\">></span> script-results\n<span class=\"token function\">cat</span> script-results <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token function\">open</span> <span class=\"token operator\">></span> open-ports\n<span class=\"token function\">cat</span> open-ports</code></pre></div>\n<p>This script will search for all open ports on the netwrok using nmap and save the output result in the <code class=\"language-text\">script-result</code> file and then <code class=\"language-text\">grep</code> is used to filter out lines and save these lines in <code class=\"language-text\">open-ports</code> file which then cat commands prints out. This is a very simple script but more complex ones can be written using common keywords that are available to us for use in the scripts.</p>\n<h3>Common Built-in BASH Commands</h3>\n<p>Thses are the most common built-in BASH commands that can be used just like a programming language to write more complex scripts.</p>\n<table>\n<thead>\n<tr>\n<th>Command</th>\n<th>Function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>cd</td>\n<td>Changes Directory</td>\n</tr>\n<tr>\n<td>echo</td>\n<td>Displays the arugment in shell</td>\n</tr>\n<tr>\n<td>exit</td>\n<td>Exits the shell</td>\n</tr>\n<tr>\n<td>bg</td>\n<td>Puts a job in the background</td>\n</tr>\n<tr>\n<td>fg</td>\n<td>Puts a job in the foreground</td>\n</tr>\n<tr>\n<td>jobs</td>\n<td>Displays list of background jobs</td>\n</tr>\n<tr>\n<td>read</td>\n<td>Reads a user input</td>\n</tr>\n<tr>\n<td>export</td>\n<td>Make a variable available to other programs</td>\n</tr>\n<tr>\n<td>readonly</td>\n<td>Declares a varibale as readonly</td>\n</tr>\n<tr>\n<td>set</td>\n<td>Displays list of all vaiables</td>\n</tr>\n<tr>\n<td>unset</td>\n<td>Deletes values from a variable</td>\n</tr>\n<tr>\n<td>wait</td>\n<td>Waits for a background process to complete</td>\n</tr>\n<tr>\n<td>test</td>\n<td>Evaluates arguments</td>\n</tr>\n<tr>\n<td>exec</td>\n<td>Executes a command without creating a new process</td>\n</tr>\n</tbody>\n</table>\n<p>These are some common commands that I rememmber but there are alot of them that can help in creating more useful scripts. Scripting is essential for automating tasks and being more productive in using the Linux and the Shell.</p>","frontmatter":{"title":"Day 48 - BASH Scripting In Linux","date":"February 17, 2021","description":null}},"previous":{"fields":{"slug":"/day-47/"},"frontmatter":{"title":"Day 47 - Environment Variables In Linux"}},"next":null},"pageContext":{"id":"f33e2ca3-1980-5fc9-888c-fb6046e3f3e5","previousPostId":"35d62b86-d4ea-5488-9ff9-b3e31e9e3de5","nextPostId":null}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}