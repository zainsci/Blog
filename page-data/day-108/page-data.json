{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-108/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"d3d96539-acb5-5ccf-bf3c-e74c896211e0","excerpt":"Yesterday we saw what SvelteJS is and why it is different from other JS frameworks like React and Vue etc. We also build a little counter with it and now we…","html":"<p>Yesterday we saw what SvelteJS is and why it is different from other JS frameworks like React and Vue etc. We also build a little counter with it and now we will be building a little Todo List with it and tomorrow again will make the list more better and functional than it is today.</p>\n<p>Again started with install SvelteJS by using the following command.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">User:~/svelte$ npx degit sveltejs/template svelte-demo\nUser:~/svelte$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\nUser:~/svelte$ <span class=\"token function\">npm</span> run dev</code></pre></div>\n<h3>ToDo List</h3>\n<p>We will be building a Todo List with SvelteJS. We can create an item and when we click on it it will cross the item. It is a simple application just like the last one but in this we will be learning about some more things about SvelteJS like using conditionals and Loops in the compoents.</p>\n<p>I removed all the boiler plate and create two new files, <code class=\"language-text\">list.svelte</code> and <code class=\"language-text\">item.svelte</code> in the src directory. Here’s what <code class=\"language-text\">item.svelte</code> looks like.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  export let name;\n  let strike = false;\n\n  function strikeItem() {\n    strike = !strike;\n  }\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">on:</span>click</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>strikeItem<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>strike <span class=\"token operator\">?</span> <span class=\"token string\">\"item-name strike\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"item-name\"</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In it we are first exporting a var <code class=\"language-text\">name</code> which is provided by the parent component <code class=\"language-text\">list.svelte</code> as a prop. boolean strike for checking if the item was clicked on and function <code class=\"language-text\">strikeItem</code> to change the boolean value if the item was clicked.</p>\n<h3>Events &#x26; Event Modifiers in Svelte</h3>\n<p>In the <code class=\"language-text\">.item</code> tag we see an attribute <code class=\"language-text\">on:click</code>. The keyword <code class=\"language-text\">on</code> followd by a colon <code class=\"language-text\">:</code> is how we listen for events in Svelte. <code class=\"language-text\">on:click</code> means to listen for event that is clicking the item in this case and in braces call the funciton to handle the event which changes the vaule of the boolean.</p>\n<p>Every event that you can use in JS or HTML can be used is Svelte with <code class=\"language-text\">on:</code> followed by the event name like <code class=\"language-text\">on:mousemove</code>, <code class=\"language-text\">on:submit</code>, <code class=\"language-text\">on:focus</code>, <code class=\"language-text\">on:dblclick</code> and <code class=\"language-text\">on:drag</code> etc.</p>\n<p>We can also use Event Modifiers in SvelteJS by using a pipe sign after the event name and adding the name of the modifier like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">&lt;</span>button on<span class=\"token operator\">:</span>click<span class=\"token operator\">|</span>preventDefault<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>\n    Click\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>In this example, clicking the button will prevent the default from happening which in this case will reload the page but will be prevented by the event modifier. If we have to do this in vanila JS it would look like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Conditionals In Svelte</h3>\n<p>This <code class=\"language-text\">strike ? &quot;item-name strike&quot; : &quot;item-name&quot;</code> is just a ternary operator in JS which check if the condition is true return this or else this. <code class=\"language-text\">condition ? if true : if false</code>. Conditionals in Svelte work like following.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>#<span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Do Someting <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Or using <span class=\"token keyword\">else</span> statements <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>#<span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Do Someting <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">:</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Do Someting <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Nesting IFs <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>#<span class=\"token keyword\">if</span> condition<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Do Someting <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">:</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> anotherCondition<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Do Someting <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Looping In Svelte</h3>\n<p>Next is the <code class=\"language-text\">list.svelte</code> file and it looks like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  import Item from \"./item.svelte\";\n\n  let items = [];\n  let value;\n\n  function addItem() {\n    items[items.length] = value;\n    value = \"\";\n  }\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>items<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>#each items <span class=\"token keyword\">as</span> item<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>each<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  &lt;form on:submit|preventDefault=</span><span class=\"token punctuation\">{</span>addItem<span class=\"token punctuation\">}</span><span class=\"token plain-text\">>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">bind:</span>value</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add Item</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Here we are importing first the item component and them using it inside a for loop which in Svelte looks like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>#each items <span class=\"token keyword\">as</span> item<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Do Something With item <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span><span class=\"token operator\">/</span>each<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We are passing the item <code class=\"language-text\">name</code> as a prop to the item component while looping over each item in the <code class=\"language-text\">items</code> array. Then we pass the addItem function to the form which calls the function on <code class=\"language-text\">on:submit|preventDefault</code> event which appends the item to <code class=\"language-text\">items</code> array and prevents the page from reloading. Adding some styling and it works like this.</p>\n<p><img src=\"/blog/895b826c17fa3cb6b4ae856079851625/todo-list.gif\" alt=\"Todo List\"></p>","frontmatter":{"title":"Day 108 - Conditionals And Events In Svelte","date":"April 18, 2021","description":null,"tags":["JavaScript","FrontEnd","SvelteJS"]}},"previous":{"fields":{"slug":"/day-107/"},"frontmatter":{"title":"Day 107 - Svelte, A JavaScript FrontEnd Framework"}},"next":{"fields":{"slug":"/day-109/"},"frontmatter":{"title":"Day 109 - Custom Events In SvelteJS"}}},"pageContext":{"id":"d3d96539-acb5-5ccf-bf3c-e74c896211e0","previousPostId":"95a8dc3b-e4f9-5e2e-9445-4db96e13e2ff","nextPostId":"d5bc6623-b20a-5209-b146-b1a5004ffb36"}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}