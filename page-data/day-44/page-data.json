{"componentChunkName":"component---src-templates-blog-post-js","path":"/day-44/","result":{"data":{"site":{"siteMetadata":{"title":"zainsci-blog"}},"markdownRemark":{"id":"e9efdae8-43fb-5a5c-bf60-a8c0861e8350","excerpt":"In the last post about the Regular Expression I tried to explain what are regex with examples but doing that would make these post unnecssary large and might beâ€¦","html":"<p>In the last post about the Regular Expression I tried to explain what are regex with examples but doing that would make these post unnecssary large and might be hard to read so I will try to simply just explain all the keywords and sysntax of the regex with examples and all of it in this single post.</p>\n<p>First of all about the basic concepts in the regex</p>\n<h3>Pipe <code class=\"language-text\">|</code></h3>\n<p>The pipe character <code class=\"language-text\">|</code> works as <code class=\"language-text\">OR</code> between two patterns. Example: <code class=\"language-text\">color|colour</code> will search for either color or colour word.</p>\n<h3>Dot <code class=\"language-text\">.</code></h3>\n<p>The dot <code class=\"language-text\">.</code> means match any character. Example: <code class=\"language-text\">a.b</code> will look for a followed by any character and then b, like <code class=\"language-text\">azb</code> or <code class=\"language-text\">a0b</code> etc.</p>\n<h3>Grouping</h3>\n<p>To group an expression parantheses <code class=\"language-text\">( )</code> are used. Example: The same expression <code class=\"language-text\">color|colour</code> can also be written as <code class=\"language-text\">col(o|ou)r</code> to look for color or colour.</p>\n<h3>Asterisk <code class=\"language-text\">*</code></h3>\n<p>The asterisk <code class=\"language-text\">*</code> will look for zero or more occurences of the preceding character. Example: <code class=\"language-text\">co*l</code> will match words that have zero or more like <code class=\"language-text\">cl</code>, <code class=\"language-text\">cool</code>, <code class=\"language-text\">coool</code> or <code class=\"language-text\">coooooool</code> etc.</p>\n<h3>Plus Symbol <code class=\"language-text\">+</code></h3>\n<p>The same as <code class=\"language-text\">*</code> but for one or more occurences of the preceding character. Example: <code class=\"language-text\">co+l</code> will match <code class=\"language-text\">col</code>, <code class=\"language-text\">cool</code>, <code class=\"language-text\">cooooooool</code> etc</p>\n<h3>Question Mark <code class=\"language-text\">?</code></h3>\n<p>The Question Mark <code class=\"language-text\">?</code> will look for zero or only one occurence of the preceding character. Example: <code class=\"language-text\">co?l</code> will match <code class=\"language-text\">col</code> and <code class=\"language-text\">cl</code> only.</p>\n<h3>Curly Brackets<code class=\"language-text\">{ }</code></h3>\n<p>Curly Brackets are used for matching an expression with given number of times. It syntax looks like this <code class=\"language-text\">{min, max}</code> where min is the minimum number and max is the maximum number of matches to look for.</p>\n<ul>\n<li><code class=\"language-text\">{n}</code> will match preceding element n times</li>\n<li><code class=\"language-text\">{n, }</code> will match preceding element n or more times</li>\n<li><code class=\"language-text\">{ ,n}</code> will match preceding up to n times</li>\n<li><code class=\"language-text\">{min, max}</code> will match preceding element between min and max times</li>\n</ul>\n<h3>Caret Symbol <code class=\"language-text\">^</code></h3>\n<p>This character <code class=\"language-text\">^</code> mathces the starting position of a line.</p>\n<h3>Dollar Sign <code class=\"language-text\">$</code></h3>\n<p>The Dollar Sign matches the end of the line.</p>\n<h3>Square Brackets <code class=\"language-text\">[ ]</code></h3>\n<p>The Square brackets <code class=\"language-text\">[ ]</code> matches a single character that is inside the brackets. and if <code class=\"language-text\">^</code> Carte is added in the brackets like <code class=\"language-text\">[^ ]</code> it will match any character except the character inside the bracekts.</p>\n<p>I think these are enough to write any pattern that you want with regex.</p>","frontmatter":{"title":"Day 44 - Explaning RegEx Syntax","date":"February 13, 2021","description":null}},"previous":{"fields":{"slug":"/day-43/"},"frontmatter":{"title":"Day 43 - Learning Regular Expressions"}},"next":null},"pageContext":{"id":"e9efdae8-43fb-5a5c-bf60-a8c0861e8350","previousPostId":"692bbb99-906b-58b2-8526-26407816b1c4","nextPostId":null}},"staticQueryHashes":["1578995489","290055352","3347749741","3894407297"]}